{"version":3,"sources":["excalidraw/src/math.ts","excalidraw/src/utils.ts","excalidraw/src/element/bounds.ts","excalidraw/src/element/sizeHelpers.ts","excalidraw/src/element/newElement.ts","excalidraw/src/element/handlerRectangles.ts","excalidraw/src/element/collision.ts","excalidraw/src/element/index.ts","excalidraw/src/keys.ts","excalidraw/src/element/mutateElement.ts","excalidraw/src/element/typeChecks.ts","excalidraw/src/i18n.ts","excalidraw/src/scene/zoom.ts","excalidraw/src/scene/globalScene.ts","excalidraw/src/renderer/renderElement.ts","excalidraw/src/constants.ts","excalidraw/src/random.ts","excalidraw/src/scene/selection.ts","excalidraw/src/points.ts","excalidraw/src/scene/scroll.ts","excalidraw/src/scene/scrollbars.ts","excalidraw/src/groups.ts","Viewer.tsx","viewer.worker.ts","Toolbar.tsx","excalidraw/src/appState.ts","excalidraw/src/colors.ts","excalidraw/src/element/linearElementEditor.ts","excalidraw/src/clipboard.ts","excalidraw/src/data/restore.ts","excalidraw/src/data/index.ts","App.tsx","useLoadElements.ts","serviceWorker.ts","index.tsx"],"names":["distanceBetweenPointAndSegment","x","y","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","Math","hypot","rotate","angle","cos","sin","adjustXYWithRotation","side","deltaX1","deltaY1","deltaX2","deltaY2","isResizeFromCenter","getFlipAdjustment","nextWidth","nextHeight","nextX1","nextY1","nextX2","nextY2","finalX1","finalY1","finalX2","finalY2","needsRotation","flipDiffX","flipDiffY","distance2d","xd","yd","isPathALoop","points","length","firstPoint","lastPoint","LINE_CONFIRM_THRESHOLD","isPointInPolygon","vertices","extreme","Number","MAX_SAFE_INTEGER","p","count","i","current","next","doIntersect","orientation","onSegment","q","r","max","min","val","p1","q1","p2","q2","o1","o2","o3","o4","SVG_NS","mockDateTime","getDateTime","date","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hr","getHours","getMinutes","isWritableElement","target","HTMLElement","dataset","type","HTMLBRElement","HTMLTextAreaElement","HTMLInputElement","getFontFamilyString","fontFamily","FONT_FAMILY","getFontString","fontSize","measureText","text","font","line","document","createElement","body","style","position","whiteSpace","appendChild","innerText","width","offsetWidth","height","offsetHeight","span","display","overflow","baseline","offsetTop","removeChild","selectNode","node","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","distance","abs","viewportCoordsToSceneCoords","canvas","scale","clientX","clientY","scrollX","scrollY","zoom","zoomOrigin","getZoomOrigin","sceneCoordsToViewportCoords","sceneX","sceneY","getGlobalCSSVariable","name","getComputedStyle","documentElement","getPropertyValue","RE_RTL_CHECK","RegExp","isRTL","test","getElementAbsoluteCoords","element","isLinearElement","getLinearElementAbsoluteCoords","getDiamondPoints","topX","floor","rightX","rightY","getCurvePathOps","shape","sets","set","ops","getMinMaxXYFromCurvePathOps","transformXY","currentP","reduce","limits","op","data","p3","p0","equation","t","idx","pow","minY","minX","maxX","maxY","Infinity","getShapeForElement","getArrowPoints","prevOp","nx","ny","arrowLength","total","cx","cy","px","py","minSize","xs","ys","PI","x3","y3","getElementBounds","getLinearElementRotatedBounds","x11","y11","x12","y12","x22","y22","x21","y21","w","h","ww","hh","getCommonBounds","elements","forEach","getResizedElementAbsoluteCoords","rescalePoints","curve","rough","generator","generateRoughOptions","getElementPointsCoords","getClosestElementBounds","from","minDistance","closestElement","isInvisiblySmallElement","getNormalizedDimensions","ret","_newElementBase","strokeColor","backgroundColor","fillStyle","strokeWidth","strokeStyle","roughness","opacity","groupIds","rest","id","randomId","seed","randomInteger","version","versionNonce","isDeleted","newElement","opts","newTextElement","metrics","newElementWith","textAlign","handleSizes","mouse","pen","touch","OMIT_SIDES_FOR_MULTIPLE_ELEMENTS","e","s","n","rotation","OMIT_SIDES_FOR_TEXT_ELEMENT","OMIT_SIDES_FOR_LINE_SLASH","nw","se","OMIT_SIDES_FOR_LINE_BACKSLASH","ne","sw","generateHandler","handlerRectanglesFromCoords","pointerType","omitSides","size","handlerWidth","handlerHeight","handlerMarginX","handlerMarginY","dashedLineMargin","centeringOffset","handlers","undefined","minimumSizeForEightHandlers","handlerRectangles","isElementDraggableFromInside","appState","dragFromInside","selectedElementIds","hitTest","lineThreshold","tx","ty","a","b","ex","ey","rx","ry","qx","qy","topY","bottomX","bottomY","leftX","leftY","relX","relY","some","subshape","hitTestCurveInside","hitTestRoughShape","console","warn","Error","drawable","operation","push","polygonPoints","pointsOnBezierCurves","mx","my","sqrt","pointInBezierEquation","getElementMap","navigator","platform","acc","getNonDeletedElements","filter","isNonDeletedElement","mutateElement","updates","didChange","key","getSizeFromPoints","value","prevPoints","nextPoints","didChangePoints","prevPoint","nextPoint","invalidateShapeForElement","globalSceneState","informMutation","isTextElement","languages","lng","label","require","rtl","currentLanguage","fallbackLanguage","getLanguage","findPartsForData","parts","part","path","replacement","split","translation","replace","languageDetector","LanguageDetector","init","languageUtils","formatLanguageCode","isWhitelisted","checkWhitelist","newLng","find","language","dir","cacheUserLanguage","setLanguage","detect","getContext","callbacks","Set","nonDeletedElements","elementsMap","this","getElement","nextElements","Array","callback","cb","has","add","delete","DASHARRAY_DASHED","DASHARRAY_DOTTED","drawElementOnCanvas","rc","context","globalAlpha","draw","shouldTemporarilyAttach","isConnected","setAttribute","lines","lineHeight","verticalOffset","horizontalOffset","fillText","remove","elementWithCanvasCache","WeakMap","shapeCache","get","options","strokeLineDash","disableMultiStroke","fillWeight","hachureGap","stroke","fill","curveFitting","generateElementShape","rectangle","polygon","ellipse","x4","y4","generateElementWithCanvas","sceneState","prevElementWithCanvas","shouldRegenerateBecauseZoom","canvasZoom","shouldCacheIgnoreZoom","elementWithCanvas","canvasOffsetX","canvasOffsetY","devicePixelRatio","CANVAS_PADDING","translate","generateElementCanvas","renderElement","renderOptimizations","fillRect","drawImage","drawElementFromCanvas","shiftX","shiftY","renderElementToSvg","rsvg","svgRoot","offsetX","offsetY","degree","group","ownerDocument","createElementNS","direction","textAnchor","textContent","SCENE","EVENT","SHIFT_LOCKING_ANGLE","CURSOR_TYPE","TEXT","CROSSHAIR","GRABBING","POINTER","CLASSES","SHAPE_ACTIONS_MENU","1","2","3","random","Random","now","nanoid","getSelectedElements","map","point","dimension","nextDimensionSize","prevDimValues","prevMaxDimension","prevMinDimension","prevDimensionSize","dimensionScaleFactor","nextMinDimension","scaledPoints","currentDimension","scaledValue","scaledPoint","normalizeScroll","pos","calculateScrollCenter","cords","viewportX1","viewportY1","viewportX2","viewportY2","innerWidth","innerHeight","isOutsideViewPort","centerX","centerY","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","viewportWidth","viewportHeight","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","safeArea","top","parseInt","bottom","left","right","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","sceneMinY","sceneMaxX","sceneMaxY","horizontal","SCROLLBAR_MARGIN","vertical","isSelectedViaGroup","groupId","editingGroupId","selectedGroupIds","getSelectedGroupIds","Object","entries","getElementsInGroup","includes","isElementInGroup","getNewGroupIdsForDuplication","mapper","copy","positionOfEditingGroupId","indexOf","endIndex","Viewer","canvasRef","useRef","useEffect","worker","Worker","exportPadding","offscreen","transferControlToOffscreen","postMessage","viewAngle","onWheel","preventDefault","deltaY","addEventListener","passive","terminate","removeEventListener","className","ref","module","exports","Toolbar","useState","showToolbar","setShowToolbar","hash","location","slice","URLSearchParams","onSubmit","event","match","exec","link","reload","alert","getDefaultAppState","isLoading","errorMessage","draggingElement","resizingElement","multiElement","editingElement","editingLinearElement","elementType","elementLocked","exportBackground","shouldAddWatermark","currentItemStrokeColor","oc","black","currentItemBackgroundColor","currentItemFillStyle","currentItemStrokeWidth","currentItemStrokeStyle","currentItemRoughness","currentItemOpacity","currentItemFontSize","currentItemFontFamily","currentItemTextAlign","viewBackgroundColor","white","cursorX","cursorY","cursorButton","scrolledOutside","username","isCollaborating","isResizing","isRotating","selectionElement","openMenu","lastPointerDownWith","previousSelectedElementIds","collaborators","Map","showShortcutsDialog","zenModeEnabled","gridSize","shades","red","pink","grape","violet","indigo","blue","cyan","teal","green","lime","yellow","orange","gray","LinearElementEditor","elementId","activePointIndex","draggingElementPointIndex","lastUncommittedPoint","normalizePoints","getNonDeletedElement","setState","scenePointerX","scenePointerY","lastX","lastY","clickedPointIndex","getPointIndexUnderCursor","deltaX","targetPoint","movePoint","history","didAddPoint","hitElement","altKey","createPointAt","resumeRecording","newPoint","pointHandles","getPointsGlobalCoordinates","POINT_HANDLE_SIZE","rotatedX","rotatedY","_idx","pointIndex","targetPosition","splice","nextCoords","prevCoords","nextCenterX","nextCenterY","dX","dY","rotated","clipboard","HTMLCanvasElement","prototype","migrateElementWithProperties","extra","base","migrateElement","fontPx","_fontFamily","fontFamilyName","getFontFamilyByName","isArray","restore","savedElements","savedState","migratedElement","scrollToContent","handle","getImportedKey","usage","crypto","subtle","importKey","alg","ext","k","key_ops","kty","importFromBackend","privateKey","fetch","response","ok","arrayBuffer","buffer","iv","Uint8Array","decrypt","decrypted","string","TextDecoder","decode","JSON","parse","json","error","App","loading","setLoading","setElements","searchParams","useLoadElements","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.918da986.chunk.js","sourcesContent":["import { Point } from \"./types\";\nimport { LINE_CONFIRM_THRESHOLD } from \"./constants\";\nimport { ExcalidrawLinearElement } from \"./element/types\";\n\n// https://stackoverflow.com/a/6853926/232122\nexport const distanceBetweenPointAndSegment = (\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n) => {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n};\n\nexport const rotate = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number,\n): [number, number] =>\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2,\n  ];\n\nexport const adjustXYWithRotation = (\n  side: \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\",\n  x: number,\n  y: number,\n  angle: number,\n  deltaX1: number,\n  deltaY1: number,\n  deltaX2: number,\n  deltaY2: number,\n  isResizeFromCenter: boolean,\n): [number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  if (side === \"e\" || side === \"ne\" || side === \"se\") {\n    if (isResizeFromCenter) {\n      x += deltaX1 + deltaX2;\n    } else {\n      x += deltaX1 * (1 + cos);\n      y += deltaX1 * sin;\n      x += deltaX2 * (1 - cos);\n      y += deltaX2 * -sin;\n    }\n  }\n  if (side === \"s\" || side === \"sw\" || side === \"se\") {\n    if (isResizeFromCenter) {\n      y += deltaY1 + deltaY2;\n    } else {\n      x += deltaY1 * -sin;\n      y += deltaY1 * (1 + cos);\n      x += deltaY2 * sin;\n      y += deltaY2 * (1 - cos);\n    }\n  }\n  if (side === \"w\" || side === \"nw\" || side === \"sw\") {\n    if (isResizeFromCenter) {\n      x += deltaX1 + deltaX2;\n    } else {\n      x += deltaX1 * (1 - cos);\n      y += deltaX1 * -sin;\n      x += deltaX2 * (1 + cos);\n      y += deltaX2 * sin;\n    }\n  }\n  if (side === \"n\" || side === \"nw\" || side === \"ne\") {\n    if (isResizeFromCenter) {\n      y += deltaY1 + deltaY2;\n    } else {\n      x += deltaY1 * sin;\n      y += deltaY1 * (1 - cos);\n      x += deltaY2 * -sin;\n      y += deltaY2 * (1 + cos);\n    }\n  }\n  return [x, y];\n};\n\nexport const getFlipAdjustment = (\n  side: \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\",\n  nextWidth: number,\n  nextHeight: number,\n  nextX1: number,\n  nextY1: number,\n  nextX2: number,\n  nextY2: number,\n  finalX1: number,\n  finalY1: number,\n  finalX2: number,\n  finalY2: number,\n  needsRotation: boolean,\n  angle: number,\n): [number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  let flipDiffX = 0;\n  let flipDiffY = 0;\n  if (nextWidth < 0) {\n    if (side === \"e\" || side === \"ne\" || side === \"se\") {\n      if (needsRotation) {\n        flipDiffX += (finalX2 - nextX1) * cos;\n        flipDiffY += (finalX2 - nextX1) * sin;\n      } else {\n        flipDiffX += finalX2 - nextX1;\n      }\n    }\n    if (side === \"w\" || side === \"nw\" || side === \"sw\") {\n      if (needsRotation) {\n        flipDiffX += (finalX1 - nextX2) * cos;\n        flipDiffY += (finalX1 - nextX2) * sin;\n      } else {\n        flipDiffX += finalX1 - nextX2;\n      }\n    }\n  }\n  if (nextHeight < 0) {\n    if (side === \"s\" || side === \"se\" || side === \"sw\") {\n      if (needsRotation) {\n        flipDiffY += (finalY2 - nextY1) * cos;\n        flipDiffX += (finalY2 - nextY1) * -sin;\n      } else {\n        flipDiffY += finalY2 - nextY1;\n      }\n    }\n    if (side === \"n\" || side === \"ne\" || side === \"nw\") {\n      if (needsRotation) {\n        flipDiffY += (finalY1 - nextY2) * cos;\n        flipDiffX += (finalY1 - nextY2) * -sin;\n      } else {\n        flipDiffY += finalY1 - nextY2;\n      }\n    }\n  }\n  return [flipDiffX, flipDiffY];\n};\n\nexport const getPointOnAPath = (point: Point, path: Point[]) => {\n  const [px, py] = point;\n  const [start, ...other] = path;\n  let [lastX, lastY] = start;\n  let kLine: number = 0;\n  let idx: number = 0;\n\n  // if any item in the array is true, it means that a point is\n  // on some segment of a line based path\n  const retVal = other.some(([x2, y2], i) => {\n    // we always take a line when dealing with line segments\n    const x1 = lastX;\n    const y1 = lastY;\n\n    lastX = x2;\n    lastY = y2;\n\n    // if a point is not within the domain of the line segment\n    // it is not on the line segment\n    if (px < x1 || px > x2) {\n      return false;\n    }\n\n    // check if all points lie on the same line\n    // y1 = kx1 + b, y2 = kx2 + b\n    // y2 - y1 = k(x2 - x2) -> k = (y2 - y1) / (x2 - x1)\n\n    // coefficient for the line (p0, p1)\n    const kL = (y2 - y1) / (x2 - x1);\n\n    // coefficient for the line segment (p0, point)\n    const kP1 = (py - y1) / (px - x1);\n\n    // coefficient for the line segment (point, p1)\n    const kP2 = (py - y2) / (px - x2);\n\n    // because we are basing both lines from the same starting point\n    // the only option for collinearity is having same coefficients\n\n    // using it for floating point comparisons\n    const epsilon = 0.3;\n\n    // if coefficient is more than an arbitrary epsilon,\n    // these lines are nor collinear\n    if (Math.abs(kP1 - kL) > epsilon && Math.abs(kP2 - kL) > epsilon) {\n      return false;\n    }\n\n    // store the coefficient because we are goint to need it\n    kLine = kL;\n    idx = i;\n\n    return true;\n  });\n\n  // Return a coordinate that is always on the line segment\n  if (retVal === true) {\n    return { x: point[0], y: kLine * point[0], segment: idx };\n  }\n\n  return null;\n};\n\nexport const distance2d = (x1: number, y1: number, x2: number, y2: number) => {\n  const xd = x2 - x1;\n  const yd = y2 - y1;\n  return Math.hypot(xd, yd);\n};\n\n// Checks if the first and last point are close enough\n// to be considered a loop\nexport const isPathALoop = (\n  points: ExcalidrawLinearElement[\"points\"],\n): boolean => {\n  if (points.length >= 3) {\n    const [firstPoint, lastPoint] = [points[0], points[points.length - 1]];\n    return (\n      distance2d(firstPoint[0], firstPoint[1], lastPoint[0], lastPoint[1]) <=\n      LINE_CONFIRM_THRESHOLD\n    );\n  }\n  return false;\n};\n\n// Draw a line from the point to the right till infiinty\n// Check how many lines of the polygon does this infinite line intersects with\n// If the number of intersections is odd, point is in the polygon\nexport const isPointInPolygon = (\n  points: Point[],\n  x: number,\n  y: number,\n): boolean => {\n  const vertices = points.length;\n\n  // There must be at least 3 vertices in polygon\n  if (vertices < 3) {\n    return false;\n  }\n  const extreme: Point = [Number.MAX_SAFE_INTEGER, y];\n  const p: Point = [x, y];\n  let count = 0;\n  for (let i = 0; i < vertices; i++) {\n    const current = points[i];\n    const next = points[(i + 1) % vertices];\n    if (doIntersect(current, next, p, extreme)) {\n      if (orientation(current, p, next) === 0) {\n        return onSegment(current, p, next);\n      }\n      count++;\n    }\n  }\n  // true if count is off\n  return count % 2 === 1;\n};\n\n// Check if q lies on the line segment pr\nconst onSegment = (p: Point, q: Point, r: Point) => {\n  return (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  );\n};\n\n// For the ordered points p, q, r, return\n// 0 if p, q, r are collinear\n// 1 if Clockwise\n// 2 if counterclickwise\nconst orientation = (p: Point, q: Point, r: Point) => {\n  const val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n  if (val === 0) {\n    return 0;\n  }\n  return val > 0 ? 1 : 2;\n};\n\n// Check is p1q1 intersects with p2q2\nconst doIntersect = (p1: Point, q1: Point, p2: Point, q2: Point) => {\n  const o1 = orientation(p1, q1, p2);\n  const o2 = orientation(p1, q1, q2);\n  const o3 = orientation(p2, q2, p1);\n  const o4 = orientation(p2, q2, q1);\n\n  if (o1 !== o2 && o3 !== o4) {\n    return true;\n  }\n\n  // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n  if (o1 === 0 && onSegment(p1, p2, q1)) {\n    return true;\n  }\n\n  // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) {\n    return true;\n  }\n\n  // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n  if (o3 === 0 && onSegment(p2, p1, q2)) {\n    return true;\n  }\n\n  // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getGridPoint = (\n  x: number,\n  y: number,\n  gridSize: number | null,\n): [number, number] => {\n  if (gridSize) {\n    return [\n      Math.round(x / gridSize) * gridSize,\n      Math.round(y / gridSize) * gridSize,\n    ];\n  }\n  return [x, y];\n};\n","import { FlooredNumber } from \"./types\";\nimport { getZoomOrigin } from \"./scene\";\nimport { CURSOR_TYPE, FONT_FAMILY } from \"./constants\";\nimport { FontFamily, FontString } from \"./element/types\";\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n\nlet mockDateTime: string | null = null;\n\nexport const setDateTimeForTests = (dateTime: string) => {\n  mockDateTime = dateTime;\n};\n\nexport const getDateTime = () => {\n  if (mockDateTime) {\n    return mockDateTime;\n  }\n\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\n  const day = `${date.getDate()}`.padStart(2, \"0\");\n  const hr = `${date.getHours()}`.padStart(2, \"0\");\n  const min = `${date.getMinutes()}`.padStart(2, \"0\");\n\n  return `${year}-${month}-${day}-${hr}${min}`;\n};\n\nexport const capitalizeString = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const isToolIcon = (\n  target: Element | EventTarget | null,\n): target is HTMLElement =>\n  target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\n\nexport const isInputLike = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLSelectElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLInputElement ||\n  target instanceof HTMLTextAreaElement ||\n  target instanceof HTMLSelectElement;\n\nexport const isWritableElement = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLTextAreaElement ||\n  (target instanceof HTMLInputElement &&\n    (target.type === \"text\" || target.type === \"number\"));\n\nexport const getFontFamilyString = ({\n  fontFamily,\n}: {\n  fontFamily: FontFamily;\n}) => {\n  return FONT_FAMILY[fontFamily];\n};\n\n/** returns fontSize+fontFamily string for assignment to DOM elements */\nexport const getFontString = ({\n  fontSize,\n  fontFamily,\n}: {\n  fontSize: number;\n  fontFamily: FontFamily;\n}) => {\n  return `${fontSize}px ${getFontFamilyString({ fontFamily })}` as FontString;\n};\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport const measureText = (text: string, font: FontString) => {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"pre\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n};\n\nexport const debounce = <T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number,\n) => {\n  let handle = 0;\n  let lastArgs: T;\n  const ret = (...args: T) => {\n    lastArgs = args;\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n  ret.flush = () => {\n    clearTimeout(handle);\n    fn(...lastArgs);\n  };\n  return ret;\n};\n\nexport const selectNode = (node: Element) => {\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nexport const removeSelection = () => {\n  const selection = window.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n  }\n};\n\nexport const distance = (x: number, y: number) => Math.abs(x - y);\n\nexport const resetCursor = () => {\n  document.documentElement.style.cursor = \"\";\n};\n\nexport const setCursorForShape = (shape: string) => {\n  if (shape === \"selection\") {\n    resetCursor();\n  } else {\n    document.documentElement.style.cursor = CURSOR_TYPE.CROSSHAIR;\n  }\n};\n\nexport const isFullScreen = () =>\n  document.fullscreenElement?.nodeName === \"HTML\";\n\nexport const allowFullScreen = () =>\n  document.documentElement.requestFullscreen();\n\nexport const exitFullScreen = () => document.exitFullscreen();\n\nexport const getShortcutKey = (shortcut: string): string => {\n  const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n  if (isMac) {\n    return `${shortcut\n      .replace(/\\bCtrlOrCmd\\b/i, \"Cmd\")\n      .replace(/\\bAlt\\b/i, \"Option\")\n      .replace(/\\bDel\\b/i, \"Delete\")\n      .replace(/\\b(Enter|Return)\\b/i, \"Enter\")}`;\n  }\n  return `${shortcut.replace(/\\bCtrlOrCmd\\b/i, \"Ctrl\")}`;\n};\nexport const viewportCoordsToSceneCoords = (\n  { clientX, clientY }: { clientX: number; clientY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const clientXWithZoom = zoomOrigin.x + (clientX - zoomOrigin.x) / zoom;\n  const clientYWithZoom = zoomOrigin.y + (clientY - zoomOrigin.y) / zoom;\n\n  const x = clientXWithZoom - scrollX;\n  const y = clientYWithZoom - scrollY;\n\n  return { x, y };\n};\n\nexport const sceneCoordsToViewportCoords = (\n  { sceneX, sceneY }: { sceneX: number; sceneY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const sceneXWithZoomAndScroll =\n    zoomOrigin.x - (zoomOrigin.x - sceneX - scrollX) * zoom;\n  const sceneYWithZoomAndScroll =\n    zoomOrigin.y - (zoomOrigin.y - sceneY - scrollY) * zoom;\n\n  const x = sceneXWithZoomAndScroll;\n  const y = sceneYWithZoomAndScroll;\n\n  return { x, y };\n};\n\nexport const getGlobalCSSVariable = (name: string) =>\n  getComputedStyle(document.documentElement).getPropertyValue(`--${name}`);\n\nconst RS_LTR_CHARS =\n  \"A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\" +\n  \"\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF\";\nconst RS_RTL_CHARS = \"\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC\";\nconst RE_RTL_CHECK = new RegExp(`^[^${RS_LTR_CHARS}]*[${RS_RTL_CHARS}]`);\n/**\n * Checks whether first directional character is RTL. Meaning whether it starts\n *  with RTL characters, or indeterminate (numbers etc.) characters followed by\n *  RTL.\n * See https://github.com/excalidraw/excalidraw/pull/1722#discussion_r436340171\n */\nexport const isRTL = (text: string) => {\n  return RE_RTL_CHECK.test(text);\n};\n","import { ExcalidrawElement, ExcalidrawLinearElement } from \"./types\";\nimport { distance2d, rotate } from \"../math\";\nimport rough from \"roughjs/bin/rough\";\nimport { Drawable, Op } from \"roughjs/bin/core\";\nimport { Point } from \"../types\";\nimport {\n  getShapeForElement,\n  generateRoughOptions,\n} from \"../renderer/renderElement\";\nimport { isLinearElement } from \"./typeChecks\";\nimport { rescalePoints } from \"../points\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\nexport const getElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n): [number, number, number, number] => {\n  if (isLinearElement(element)) {\n    return getLinearElementAbsoluteCoords(element);\n  }\n  return [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n  ];\n};\n\nexport const getDiamondPoints = (element: ExcalidrawElement) => {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n};\n\nexport const getCurvePathOps = (shape: Drawable): Op[] => {\n  for (const set of shape.sets) {\n    if (set.type === \"path\") {\n      return set.ops;\n    }\n  }\n  return shape.sets[0].ops;\n};\n\nconst getMinMaxXYFromCurvePathOps = (\n  ops: Op[],\n  transformXY?: (x: number, y: number) => [number, number],\n): [number, number, number, number] => {\n  let currentP: Point = [0, 0];\n  const { minX, minY, maxX, maxY } = ops.reduce(\n    (limits, { op, data }) => {\n      // There are only four operation types:\n      // move, bcurveTo, lineTo, and curveTo\n      if (op === \"move\") {\n        // change starting point\n        currentP = (data as unknown) as Point;\n        // move operation does not draw anything; so, it always\n        // returns false\n      } else if (op === \"bcurveTo\") {\n        // create points from bezier curve\n        // bezier curve stores data as a flattened array of three positions\n        // [x1, y1, x2, y2, x3, y3]\n        const p1 = [data[0], data[1]] as Point;\n        const p2 = [data[2], data[3]] as Point;\n        const p3 = [data[4], data[5]] as Point;\n\n        const p0 = currentP;\n        currentP = p3;\n\n        const equation = (t: number, idx: number) =>\n          Math.pow(1 - t, 3) * p3[idx] +\n          3 * t * Math.pow(1 - t, 2) * p2[idx] +\n          3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n          p0[idx] * Math.pow(t, 3);\n\n        let t = 0;\n        while (t <= 1.0) {\n          let x = equation(t, 0);\n          let y = equation(t, 1);\n          if (transformXY) {\n            [x, y] = transformXY(x, y);\n          }\n\n          limits.minY = Math.min(limits.minY, y);\n          limits.minX = Math.min(limits.minX, x);\n\n          limits.maxX = Math.max(limits.maxX, x);\n          limits.maxY = Math.max(limits.maxY, y);\n\n          t += 0.1;\n        }\n      } else if (op === \"lineTo\") {\n        // TODO: Implement this\n      } else if (op === \"qcurveTo\") {\n        // TODO: Implement this\n      }\n      return limits;\n    },\n    { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n  );\n\n  return [minX, minY, maxX, maxY];\n};\n\nconst getLinearElementAbsoluteCoords = (\n  element: ExcalidrawLinearElement,\n): [number, number, number, number] => {\n  if (element.points.length < 2 || !getShapeForElement(element)) {\n    // XXX this is just a poor estimate and not very useful\n    const { minX, minY, maxX, maxY } = element.points.reduce(\n      (limits, [x, y]) => {\n        limits.minY = Math.min(limits.minY, y);\n        limits.minX = Math.min(limits.minX, x);\n\n        limits.maxX = Math.max(limits.maxX, x);\n        limits.maxY = Math.max(limits.maxY, y);\n\n        return limits;\n      },\n      { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n    );\n    return [\n      minX + element.x,\n      minY + element.y,\n      maxX + element.x,\n      maxY + element.y,\n    ];\n  }\n\n  const shape = getShapeForElement(element) as Drawable[];\n\n  // first element is always the curve\n  const ops = getCurvePathOps(shape[0]);\n\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getArrowPoints = (\n  element: ExcalidrawLinearElement,\n  shape: Drawable[],\n) => {\n  const ops = getCurvePathOps(shape[0]);\n\n  const data = ops[ops.length - 1].data;\n  const p3 = [data[4], data[5]] as Point;\n  const p2 = [data[2], data[3]] as Point;\n  const p1 = [data[0], data[1]] as Point;\n\n  // we need to find p0 of the bezier curve\n  // it is typically the last point of the previous\n  // curve; it can also be the position of moveTo operation\n  const prevOp = ops[ops.length - 2];\n  let p0: Point = [0, 0];\n  if (prevOp.op === \"move\") {\n    p0 = (prevOp.data as unknown) as Point;\n  } else if (prevOp.op === \"bcurveTo\") {\n    p0 = [prevOp.data[4], prevOp.data[5]];\n  }\n\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\n  const equation = (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n\n  // we know the last point of the arrow\n  const [x2, y2] = p3;\n\n  // by using cubic bezier equation (B(t)) and the given parameters,\n  // we calculate a point that is closer to the last point\n  // The value 0.3 is chosen arbitrarily and it works best for all\n  // the tested cases\n  const [x1, y1] = [equation(0.3, 0), equation(0.3, 1)];\n\n  // find the normalized direction vector based on the\n  // previously calculated points\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  const nx = (x2 - x1) / distance;\n  const ny = (y2 - y1) / distance;\n\n  const size = 30; // pixels\n  const arrowLength = element.points.reduce((total, [cx, cy], idx, points) => {\n    const [px, py] = idx > 0 ? points[idx - 1] : [0, 0];\n    return total + Math.hypot(cx - px, cy - py);\n  }, 0);\n\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  // This value is selected by minizing a minmum size with the whole length of the arrow\n  // intead of last segment of the arrow\n  const minSize = Math.min(size, arrowLength / 2);\n  const xs = x2 - nx * minSize;\n  const ys = y2 - ny * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x2, y2, x3, y3, x4, y4];\n};\n\nconst getLinearElementRotatedBounds = (\n  element: ExcalidrawLinearElement,\n  cx: number,\n  cy: number,\n): [number, number, number, number] => {\n  if (element.points.length < 2 || !getShapeForElement(element)) {\n    // XXX this is just a poor estimate and not very useful\n    const { minX, minY, maxX, maxY } = element.points.reduce(\n      (limits, [x, y]) => {\n        [x, y] = rotate(element.x + x, element.y + y, cx, cy, element.angle);\n        limits.minY = Math.min(limits.minY, y);\n        limits.minX = Math.min(limits.minX, x);\n        limits.maxX = Math.max(limits.maxX, x);\n        limits.maxY = Math.max(limits.maxY, y);\n        return limits;\n      },\n      { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n    );\n    return [minX, minY, maxX, maxY];\n  }\n\n  const shape = getShapeForElement(element) as Drawable[];\n\n  // first element is always the curve\n  const ops = getCurvePathOps(shape[0]);\n\n  const transformXY = (x: number, y: number) =>\n    rotate(element.x + x, element.y + y, cx, cy, element.angle);\n  return getMinMaxXYFromCurvePathOps(ops, transformXY);\n};\n\nexport const getElementBounds = (\n  element: ExcalidrawElement,\n): [number, number, number, number] => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = (x1 + x2) / 2;\n  const cy = (y1 + y2) / 2;\n  if (isLinearElement(element)) {\n    return getLinearElementRotatedBounds(element, cx, cy);\n  }\n  if (element.type === \"diamond\") {\n    const [x11, y11] = rotate(cx, y1, cx, cy, element.angle);\n    const [x12, y12] = rotate(cx, y2, cx, cy, element.angle);\n    const [x22, y22] = rotate(x1, cy, cx, cy, element.angle);\n    const [x21, y21] = rotate(x2, cy, cx, cy, element.angle);\n    const minX = Math.min(x11, x12, x22, x21);\n    const minY = Math.min(y11, y12, y22, y21);\n    const maxX = Math.max(x11, x12, x22, x21);\n    const maxY = Math.max(y11, y12, y22, y21);\n    return [minX, minY, maxX, maxY];\n  }\n  if (element.type === \"ellipse\") {\n    const w = (x2 - x1) / 2;\n    const h = (y2 - y1) / 2;\n    const cos = Math.cos(element.angle);\n    const sin = Math.sin(element.angle);\n    const ww = Math.hypot(w * cos, h * sin);\n    const hh = Math.hypot(h * cos, w * sin);\n    return [cx - ww, cy - hh, cx + ww, cy + hh];\n  }\n  const [x11, y11] = rotate(x1, y1, cx, cy, element.angle);\n  const [x12, y12] = rotate(x1, y2, cx, cy, element.angle);\n  const [x22, y22] = rotate(x2, y2, cx, cy, element.angle);\n  const [x21, y21] = rotate(x2, y1, cx, cy, element.angle);\n  const minX = Math.min(x11, x12, x22, x21);\n  const minY = Math.min(y11, y12, y22, y21);\n  const maxX = Math.max(x11, x12, x22, x21);\n  const maxY = Math.max(y11, y12, y22, y21);\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getCommonBounds = (\n  elements: readonly ExcalidrawElement[],\n): [number, number, number, number] => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getResizedElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n  nextWidth: number,\n  nextHeight: number,\n): [number, number, number, number] => {\n  if (!isLinearElement(element)) {\n    return [\n      element.x,\n      element.y,\n      element.x + nextWidth,\n      element.y + nextHeight,\n    ];\n  }\n\n  const points = rescalePoints(\n    0,\n    nextWidth,\n    rescalePoints(1, nextHeight, element.points),\n  );\n\n  const gen = rough.generator();\n  const curve = gen.curve(\n    points as [number, number][],\n    generateRoughOptions(element),\n  );\n  const ops = getCurvePathOps(curve);\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getElementPointsCoords = (\n  element: ExcalidrawLinearElement,\n  points: readonly (readonly [number, number])[],\n): [number, number, number, number] => {\n  // This might be computationally heavey\n  const gen = rough.generator();\n  const curve = gen.curve(\n    points as [number, number][],\n    generateRoughOptions(element),\n  );\n  const ops = getCurvePathOps(curve);\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getClosestElementBounds = (\n  elements: readonly ExcalidrawElement[],\n  from: { x: number; y: number },\n): [number, number, number, number] => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minDistance = Infinity;\n  let closestElement = elements[0];\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    const distance = distance2d((x1 + x2) / 2, (y1 + y2) / 2, from.x, from.y);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestElement = element;\n    }\n  });\n\n  return getElementBounds(closestElement);\n};\n","import { ExcalidrawElement } from \"./types\";\nimport { mutateElement } from \"./mutateElement\";\nimport { isLinearElement } from \"./typeChecks\";\nimport { SHIFT_LOCKING_ANGLE } from \"../constants\";\n\nexport const isInvisiblySmallElement = (\n  element: ExcalidrawElement,\n): boolean => {\n  if (isLinearElement(element)) {\n    return element.points.length < 2;\n  }\n  return element.width === 0 && element.height === 0;\n};\n\n/**\n * Makes a perfect shape or diagonal/horizontal/vertical line\n */\nexport const getPerfectElementSize = (\n  elementType: string,\n  width: number,\n  height: number,\n): { width: number; height: number } => {\n  const absWidth = Math.abs(width);\n  const absHeight = Math.abs(height);\n\n  if (\n    elementType === \"line\" ||\n    elementType === \"arrow\" ||\n    elementType === \"draw\"\n  ) {\n    const lockedAngle =\n      Math.round(Math.atan(absHeight / absWidth) / SHIFT_LOCKING_ANGLE) *\n      SHIFT_LOCKING_ANGLE;\n    if (lockedAngle === 0) {\n      height = 0;\n    } else if (lockedAngle === Math.PI / 2) {\n      width = 0;\n    } else {\n      height =\n        Math.round(absWidth * Math.tan(lockedAngle)) * Math.sign(height) ||\n        height;\n    }\n  } else if (elementType !== \"selection\") {\n    height = absWidth * Math.sign(height);\n  }\n  return { width, height };\n};\n\nexport const resizePerfectLineForNWHandler = (\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n) => {\n  const anchorX = element.x + element.width;\n  const anchorY = element.y + element.height;\n  const distanceToAnchorX = x - anchorX;\n  const distanceToAnchorY = y - anchorY;\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\n    mutateElement(element, {\n      x: anchorX,\n      width: 0,\n      y,\n      height: -distanceToAnchorY,\n    });\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\n    mutateElement(element, {\n      y: anchorY,\n      height: 0,\n    });\n  } else {\n    const nextHeight =\n      Math.sign(distanceToAnchorY) *\n      Math.sign(distanceToAnchorX) *\n      element.width;\n    mutateElement(element, {\n      x,\n      y: anchorY - nextHeight,\n      width: -distanceToAnchorX,\n      height: nextHeight,\n    });\n  }\n};\n\nexport const getNormalizedDimensions = (\n  element: Pick<ExcalidrawElement, \"width\" | \"height\" | \"x\" | \"y\">,\n): {\n  width: ExcalidrawElement[\"width\"];\n  height: ExcalidrawElement[\"height\"];\n  x: ExcalidrawElement[\"x\"];\n  y: ExcalidrawElement[\"y\"];\n} => {\n  const ret = {\n    width: element.width,\n    height: element.height,\n    x: element.x,\n    y: element.y,\n  };\n\n  if (element.width < 0) {\n    const nextWidth = Math.abs(element.width);\n    ret.width = nextWidth;\n    ret.x = element.x - nextWidth;\n  }\n\n  if (element.height < 0) {\n    const nextHeight = Math.abs(element.height);\n    ret.height = nextHeight;\n    ret.y = element.y - nextHeight;\n  }\n\n  return ret;\n};\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawGenericElement,\n  NonDeleted,\n  TextAlign,\n  FontFamily,\n  GroupId,\n} from \"../element/types\";\nimport { measureText, getFontString } from \"../utils\";\nimport { randomInteger, randomId } from \"../random\";\nimport { newElementWith } from \"./mutateElement\";\nimport { getNewGroupIdsForDuplication } from \"../groups\";\nimport { AppState } from \"../types\";\n\ntype ElementConstructorOpts = MarkOptional<\n  Omit<ExcalidrawGenericElement, \"id\" | \"type\" | \"isDeleted\">,\n  | \"width\"\n  | \"height\"\n  | \"angle\"\n  | \"groupIds\"\n  | \"seed\"\n  | \"version\"\n  | \"versionNonce\"\n>;\n\nconst _newElementBase = <T extends ExcalidrawElement>(\n  type: T[\"type\"],\n  {\n    x,\n    y,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    width = 0,\n    height = 0,\n    angle = 0,\n    groupIds = [],\n    ...rest\n  }: ElementConstructorOpts & Omit<Partial<ExcalidrawGenericElement>, \"type\">,\n) => ({\n  id: rest.id || randomId(),\n  type,\n  x,\n  y,\n  width,\n  height,\n  angle,\n  strokeColor,\n  backgroundColor,\n  fillStyle,\n  strokeWidth,\n  strokeStyle,\n  roughness,\n  opacity,\n  groupIds,\n  seed: rest.seed ?? randomInteger(),\n  version: rest.version || 1,\n  versionNonce: rest.versionNonce ?? 0,\n  isDeleted: false as false,\n});\n\nexport const newElement = (\n  opts: {\n    type: ExcalidrawGenericElement[\"type\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawGenericElement> =>\n  _newElementBase<ExcalidrawGenericElement>(opts.type, opts);\n\nexport const newTextElement = (\n  opts: {\n    text: string;\n    fontSize: number;\n    fontFamily: FontFamily;\n    textAlign: TextAlign;\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawTextElement> => {\n  const metrics = measureText(opts.text, getFontString(opts));\n  const textElement = newElementWith(\n    {\n      ..._newElementBase<ExcalidrawTextElement>(\"text\", opts),\n      text: opts.text,\n      fontSize: opts.fontSize,\n      fontFamily: opts.fontFamily,\n      textAlign: opts.textAlign,\n      // Center the text\n      x: opts.x - metrics.width / 2,\n      y: opts.y - metrics.height / 2,\n      width: metrics.width,\n      height: metrics.height,\n      baseline: metrics.baseline,\n    },\n    {},\n  );\n\n  return textElement;\n};\n\nexport const newLinearElement = (\n  opts: {\n    type: ExcalidrawLinearElement[\"type\"];\n    lastCommittedPoint?: ExcalidrawLinearElement[\"lastCommittedPoint\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawLinearElement> => {\n  return {\n    ..._newElementBase<ExcalidrawLinearElement>(opts.type, opts),\n    points: [],\n    lastCommittedPoint: opts.lastCommittedPoint || null,\n  };\n};\n\n// Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\nexport const deepCopyElement = (val: any, depth: number = 0) => {\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    const tmp =\n      typeof val.constructor === \"function\"\n        ? Object.create(Object.getPrototypeOf(val))\n        : {};\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n        tmp[key] = deepCopyElement(val[key], depth + 1);\n      }\n    }\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n    while (k--) {\n      arr[k] = deepCopyElement(val[k], depth + 1);\n    }\n    return arr;\n  }\n\n  return val;\n};\n\n/**\n * Duplicate an element, often used in the alt-drag operation.\n * Note that this method has gotten a bit complicated since the\n * introduction of gruoping/ungrouping elements.\n * @param editingGroupId The current group being edited. The new\n *                       element will inherit this group and its\n *                       parents.\n * @param groupIdMapForOperation A Map that maps old group IDs to\n *                               duplicated ones. If you are duplicating\n *                               multiple elements at once, share this map\n *                               amongst all of them\n * @param element Element to duplicate\n * @param overrides Any element properties to override\n */\nexport const duplicateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  editingGroupId: AppState[\"editingGroupId\"],\n  groupIdMapForOperation: Map<GroupId, GroupId>,\n  element: TElement,\n  overrides?: Partial<TElement>,\n): TElement => {\n  let copy: TElement = deepCopyElement(element);\n  copy.id = randomId();\n  copy.seed = randomInteger();\n  copy.groupIds = getNewGroupIdsForDuplication(\n    copy.groupIds,\n    editingGroupId,\n    (groupId) => {\n      if (!groupIdMapForOperation.has(groupId)) {\n        groupIdMapForOperation.set(groupId, randomId());\n      }\n      return groupIdMapForOperation.get(groupId)!;\n    },\n  );\n  if (overrides) {\n    copy = Object.assign(copy, overrides);\n  }\n  return copy;\n};\n","import { ExcalidrawElement, PointerType } from \"./types\";\n\nimport { getElementAbsoluteCoords } from \"./bounds\";\nimport { rotate } from \"../math\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\" | \"rotation\";\n\nconst handleSizes: { [k in PointerType]: number } = {\n  mouse: 8,\n  pen: 16,\n  touch: 28,\n};\n\nconst ROTATION_HANDLER_GAP = 16;\n\nexport const OMIT_SIDES_FOR_MULTIPLE_ELEMENTS = {\n  e: true,\n  s: true,\n  n: true,\n  w: true,\n  rotation: true,\n};\n\nconst OMIT_SIDES_FOR_TEXT_ELEMENT = {\n  e: true,\n  s: true,\n  n: true,\n  w: true,\n};\n\nconst OMIT_SIDES_FOR_LINE_SLASH = {\n  e: true,\n  s: true,\n  n: true,\n  w: true,\n  nw: true,\n  se: true,\n  rotation: true,\n};\n\nconst OMIT_SIDES_FOR_LINE_BACKSLASH = {\n  e: true,\n  s: true,\n  n: true,\n  w: true,\n  ne: true,\n  sw: true,\n  rotation: true,\n};\n\nconst generateHandler = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  cx: number,\n  cy: number,\n  angle: number,\n): [number, number, number, number] => {\n  const [xx, yy] = rotate(x + width / 2, y + height / 2, cx, cy, angle);\n  return [xx - width / 2, yy - height / 2, width, height];\n};\n\nexport const handlerRectanglesFromCoords = (\n  [x1, y1, x2, y2]: [number, number, number, number],\n  angle: number,\n  zoom: number,\n  pointerType: PointerType = \"mouse\",\n  omitSides: { [T in Sides]?: boolean } = {},\n): Partial<{ [T in Sides]: [number, number, number, number] }> => {\n  const size = handleSizes[pointerType];\n  const handlerWidth = size / zoom;\n  const handlerHeight = size / zoom;\n\n  const handlerMarginX = size / zoom;\n  const handlerMarginY = size / zoom;\n\n  const width = x2 - x1;\n  const height = y2 - y1;\n  const cx = (x1 + x2) / 2;\n  const cy = (y1 + y2) / 2;\n\n  const dashedLineMargin = 4 / zoom;\n\n  const centeringOffset = (size - 8) / (2 * zoom);\n\n  const handlers: Partial<\n    { [T in Sides]: [number, number, number, number] }\n  > = {\n    nw: omitSides[\"nw\"]\n      ? undefined\n      : generateHandler(\n          x1 - dashedLineMargin - handlerMarginX + centeringOffset,\n          y1 - dashedLineMargin - handlerMarginY + centeringOffset,\n          handlerWidth,\n          handlerHeight,\n          cx,\n          cy,\n          angle,\n        ),\n    ne: omitSides[\"ne\"]\n      ? undefined\n      : generateHandler(\n          x2 + dashedLineMargin - centeringOffset,\n          y1 - dashedLineMargin - handlerMarginY + centeringOffset,\n          handlerWidth,\n          handlerHeight,\n          cx,\n          cy,\n          angle,\n        ),\n    sw: omitSides[\"sw\"]\n      ? undefined\n      : generateHandler(\n          x1 - dashedLineMargin - handlerMarginX + centeringOffset,\n          y2 + dashedLineMargin - centeringOffset,\n          handlerWidth,\n          handlerHeight,\n          cx,\n          cy,\n          angle,\n        ),\n    se: omitSides[\"se\"]\n      ? undefined\n      : generateHandler(\n          x2 + dashedLineMargin - centeringOffset,\n          y2 + dashedLineMargin - centeringOffset,\n          handlerWidth,\n          handlerHeight,\n          cx,\n          cy,\n          angle,\n        ),\n    rotation: omitSides[\"rotation\"]\n      ? undefined\n      : generateHandler(\n          x1 + width / 2 - handlerWidth / 2,\n          y1 -\n            dashedLineMargin -\n            handlerMarginY +\n            centeringOffset -\n            ROTATION_HANDLER_GAP / zoom,\n          handlerWidth,\n          handlerHeight,\n          cx,\n          cy,\n          angle,\n        ),\n  };\n\n  // We only want to show height handlers (all cardinal directions)  above a certain size\n  const minimumSizeForEightHandlers = (5 * size) / zoom;\n  if (Math.abs(width) > minimumSizeForEightHandlers) {\n    if (!omitSides[\"n\"]) {\n      handlers[\"n\"] = generateHandler(\n        x1 + width / 2 - handlerWidth / 2,\n        y1 - dashedLineMargin - handlerMarginY + centeringOffset,\n        handlerWidth,\n        handlerHeight,\n        cx,\n        cy,\n        angle,\n      );\n    }\n    if (!omitSides[\"s\"]) {\n      handlers[\"s\"] = generateHandler(\n        x1 + width / 2 - handlerWidth / 2,\n        y2 + dashedLineMargin - centeringOffset,\n        handlerWidth,\n        handlerHeight,\n        cx,\n        cy,\n        angle,\n      );\n    }\n  }\n  if (Math.abs(height) > minimumSizeForEightHandlers) {\n    if (!omitSides[\"w\"]) {\n      handlers[\"w\"] = generateHandler(\n        x1 - dashedLineMargin - handlerMarginX + centeringOffset,\n        y1 + height / 2 - handlerHeight / 2,\n        handlerWidth,\n        handlerHeight,\n        cx,\n        cy,\n        angle,\n      );\n    }\n    if (!omitSides[\"e\"]) {\n      handlers[\"e\"] = generateHandler(\n        x2 + dashedLineMargin - centeringOffset,\n        y1 + height / 2 - handlerHeight / 2,\n        handlerWidth,\n        handlerHeight,\n        cx,\n        cy,\n        angle,\n      );\n    }\n  }\n\n  return handlers;\n};\n\nexport const handlerRectangles = (\n  element: ExcalidrawElement,\n  zoom: number,\n  pointerType: PointerType = \"mouse\",\n) => {\n  let omitSides: { [T in Sides]?: boolean } = {};\n  if (\n    element.type === \"arrow\" ||\n    element.type === \"line\" ||\n    element.type === \"draw\"\n  ) {\n    if (element.points.length === 2) {\n      // only check the last point because starting point is always (0,0)\n      const [, p1] = element.points;\n      if (p1[0] === 0 || p1[1] === 0) {\n        omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;\n      } else if (p1[0] > 0 && p1[1] < 0) {\n        omitSides = OMIT_SIDES_FOR_LINE_SLASH;\n      } else if (p1[0] > 0 && p1[1] > 0) {\n        omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;\n      } else if (p1[0] < 0 && p1[1] > 0) {\n        omitSides = OMIT_SIDES_FOR_LINE_SLASH;\n      } else if (p1[0] < 0 && p1[1] < 0) {\n        omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;\n      }\n    }\n  } else if (element.type === \"text\") {\n    omitSides = OMIT_SIDES_FOR_TEXT_ELEMENT;\n  }\n\n  return handlerRectanglesFromCoords(\n    getElementAbsoluteCoords(element),\n    element.angle,\n    zoom,\n    pointerType,\n    omitSides,\n  );\n};\n","import {\n  distanceBetweenPointAndSegment,\n  isPathALoop,\n  rotate,\n  isPointInPolygon,\n} from \"../math\";\nimport { pointsOnBezierCurves } from \"points-on-curve\";\n\nimport { NonDeletedExcalidrawElement } from \"./types\";\n\nimport {\n  getDiamondPoints,\n  getElementAbsoluteCoords,\n  getCurvePathOps,\n} from \"./bounds\";\nimport { Point } from \"../types\";\nimport { Drawable } from \"roughjs/bin/core\";\nimport { AppState } from \"../types\";\nimport { getShapeForElement } from \"../renderer/renderElement\";\nimport { isLinearElement } from \"./typeChecks\";\n\nconst isElementDraggableFromInside = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n): boolean => {\n  if (element.type === \"arrow\") {\n    return false;\n  }\n  const dragFromInside =\n    element.backgroundColor !== \"transparent\" ||\n    appState.selectedElementIds[element.id];\n  if (element.type === \"line\" || element.type === \"draw\") {\n    return dragFromInside && isPathALoop(element.points);\n  }\n  return dragFromInside;\n};\n\nexport const hitTest = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: number,\n): boolean => {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10 / zoom;\n\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = (x1 + x2) / 2;\n  const cy = (y1 + y2) / 2;\n  // reverse rotate the pointer\n  [x, y] = rotate(x, y, cx, cy, -element.angle);\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach((x) => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    if (isElementDraggableFromInside(element, appState)) {\n      return (\n        a * tx - (px - lineThreshold) >= 0 && b * ty - (py - lineThreshold) >= 0\n      );\n    }\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    if (isElementDraggableFromInside(element, appState)) {\n      return (\n        x > x1 - lineThreshold &&\n        x < x2 + lineThreshold &&\n        y > y1 - lineThreshold &&\n        y < y2 + lineThreshold\n      );\n    }\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n    let [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY,\n    ] = getDiamondPoints(element);\n\n    if (isElementDraggableFromInside(element, appState)) {\n      // TODO: remove this when we normalize coordinates globally\n      if (topY > bottomY) {\n        [bottomY, topY] = [topY, bottomY];\n      }\n      if (rightX < leftX) {\n        [leftX, rightX] = [rightX, leftX];\n      }\n\n      topY -= lineThreshold;\n      bottomY += lineThreshold;\n      leftX -= lineThreshold;\n      rightX += lineThreshold;\n\n      // all deltas should be < 0. Delta > 0 indicates it's on the outside side\n      //  of the line.\n      //\n      //          (topX, topY)\n      //     D  /             \\ A\n      //      /               \\\n      //  (leftX, leftY)  (rightX, rightY)\n      //    C \\               / B\n      //      \\              /\n      //      (bottomX, bottomY)\n      //\n      // https://stackoverflow.com/a/2752753/927631\n      return (\n        // delta from line D\n        (leftX - topX) * (y - leftY) - (leftX - x) * (topY - leftY) <= 0 &&\n        // delta from line A\n        (topX - rightX) * (y - rightY) - (x - rightX) * (topY - rightY) <= 0 &&\n        // delta from line B\n        (rightX - bottomX) * (y - bottomY) -\n          (x - bottomX) * (rightY - bottomY) <=\n          0 &&\n        // delta from line C\n        (bottomX - leftX) * (y - leftY) - (x - leftX) * (bottomY - leftY) <= 0\n      );\n    }\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (isLinearElement(element)) {\n    if (!getShapeForElement(element)) {\n      return false;\n    }\n    const shape = getShapeForElement(element) as Drawable[];\n\n    if (\n      x < x1 - lineThreshold ||\n      y < y1 - lineThreshold ||\n      x > x2 + lineThreshold ||\n      y > y2 + lineThreshold\n    ) {\n      return false;\n    }\n\n    const relX = x - element.x;\n    const relY = y - element.y;\n\n    if (isElementDraggableFromInside(element, appState)) {\n      const hit = shape.some((subshape) =>\n        hitTestCurveInside(subshape, relX, relY, lineThreshold),\n      );\n      if (hit) {\n        return true;\n      }\n    }\n\n    // hit thest all \"subshapes\" of the linear element\n    return shape.some((subshape) =>\n      hitTestRoughShape(subshape, relX, relY, lineThreshold),\n    );\n  } else if (element.type === \"text\") {\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  }\n  throw new Error(`Unimplemented type ${element.type}`);\n};\n\nconst pointInBezierEquation = (\n  p0: Point,\n  p1: Point,\n  p2: Point,\n  p3: Point,\n  [mx, my]: Point,\n  lineThreshold: number,\n) => {\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\n  const equation = (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n\n  // go through t in increments of 0.01\n  let t = 0;\n  while (t <= 1.0) {\n    const tx = equation(t, 0);\n    const ty = equation(t, 1);\n\n    const diff = Math.sqrt(Math.pow(tx - mx, 2) + Math.pow(ty - my, 2));\n\n    if (diff < lineThreshold) {\n      return true;\n    }\n\n    t += 0.01;\n  }\n\n  return false;\n};\n\nconst hitTestCurveInside = (\n  drawable: Drawable,\n  x: number,\n  y: number,\n  lineThreshold: number,\n) => {\n  const ops = getCurvePathOps(drawable);\n  const points: Point[] = [];\n  for (const operation of ops) {\n    if (operation.op === \"move\") {\n      if (points.length) {\n        break;\n      }\n      points.push([operation.data[0], operation.data[1]]);\n    } else if (operation.op === \"bcurveTo\") {\n      points.push([operation.data[0], operation.data[1]]);\n      points.push([operation.data[2], operation.data[3]]);\n      points.push([operation.data[4], operation.data[5]]);\n    }\n  }\n  if (points.length >= 4) {\n    const polygonPoints = pointsOnBezierCurves(points as any, 10, 5);\n    return isPointInPolygon(polygonPoints, x, y);\n  }\n  return false;\n};\n\nconst hitTestRoughShape = (\n  drawable: Drawable,\n  x: number,\n  y: number,\n  lineThreshold: number,\n) => {\n  // read operations from first opSet\n  const ops = getCurvePathOps(drawable);\n\n  // set start position as (0,0) just in case\n  // move operation does not exist (unlikely but it is worth safekeeping it)\n  let currentP: Point = [0, 0];\n\n  return ops.some(({ op, data }, idx) => {\n    // There are only four operation types:\n    // move, bcurveTo, lineTo, and curveTo\n    if (op === \"move\") {\n      // change starting point\n      currentP = (data as unknown) as Point;\n      // move operation does not draw anything; so, it always\n      // returns false\n    } else if (op === \"bcurveTo\") {\n      // create points from bezier curve\n      // bezier curve stores data as a flattened array of three positions\n      // [x1, y1, x2, y2, x3, y3]\n      const p1 = [data[0], data[1]] as Point;\n      const p2 = [data[2], data[3]] as Point;\n      const p3 = [data[4], data[5]] as Point;\n\n      const p0 = currentP;\n      currentP = p3;\n\n      // check if points are on the curve\n      // cubic bezier curves require four parameters\n      // the first parameter is the last stored position (p0)\n      const retVal = pointInBezierEquation(\n        p0,\n        p1,\n        p2,\n        p3,\n        [x, y],\n        lineThreshold,\n      );\n\n      // set end point of bezier curve as the new starting point for\n      // upcoming operations as each operation is based on the last drawn\n      // position of the previous operation\n      return retVal;\n    } else if (op === \"lineTo\") {\n      // TODO: Implement this\n    } else if (op === \"qcurveTo\") {\n      // TODO: Implement this\n    }\n\n    return false;\n  });\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"./types\";\nimport { isInvisiblySmallElement } from \"./sizeHelpers\";\n\nexport {\n  newElement,\n  newTextElement,\n  newLinearElement,\n  duplicateElement,\n} from \"./newElement\";\nexport {\n  getElementAbsoluteCoords,\n  getElementBounds,\n  getCommonBounds,\n  getDiamondPoints,\n  getArrowPoints,\n  getClosestElementBounds,\n} from \"./bounds\";\n\nexport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  handlerRectanglesFromCoords,\n  handlerRectangles,\n} from \"./handlerRectangles\";\nexport { hitTest } from \"./collision\";\nexport {\n  resizeTest,\n  getCursorForResizingElement,\n  normalizeResizeHandle,\n  getElementWithResizeHandler,\n  getResizeHandlerFromCoords,\n} from \"./resizeTest\";\nexport {\n  resizeElements,\n  getResizeOffsetXY,\n  getResizeArrowDirection,\n} from \"./resizeElements\";\nexport {\n  dragSelectedElements,\n  getDragOffsetXY,\n  dragNewElement,\n} from \"./dragElements\";\nexport { isTextElement, isExcalidrawElement } from \"./typeChecks\";\nexport { textWysiwyg } from \"./textWysiwyg\";\nexport { redrawTextBoundingBox } from \"./textElement\";\nexport {\n  getPerfectElementSize,\n  isInvisiblySmallElement,\n  resizePerfectLineForNWHandler,\n  getNormalizedDimensions,\n} from \"./sizeHelpers\";\nexport { showSelectedShapeActions } from \"./showSelectedShapeActions\";\n\nexport const getSyncableElements = (\n  elements: readonly ExcalidrawElement[], // There are places in Excalidraw where synthetic invisibly small elements are added and removed.\n) =>\n  // It's probably best to keep those local otherwise there might be a race condition that\n  // gets the app into an invalid state. I've never seen it happen but I'm worried about it :)\n  elements.filter((el) => el.isDeleted || !isInvisiblySmallElement(el));\n\nexport const getElementMap = (elements: readonly ExcalidrawElement[]) =>\n  elements.reduce(\n    (acc: { [key: string]: ExcalidrawElement }, element: ExcalidrawElement) => {\n      acc[element.id] = element;\n      return acc;\n    },\n    {},\n  );\n\nexport const getDrawingVersion = (elements: readonly ExcalidrawElement[]) =>\n  elements.reduce((acc, el) => acc + el.version, 0);\n\nexport const getNonDeletedElements = (elements: readonly ExcalidrawElement[]) =>\n  elements.filter(\n    (element) => !element.isDeleted,\n  ) as readonly NonDeletedExcalidrawElement[];\n\nexport const isNonDeletedElement = <T extends ExcalidrawElement>(\n  element: T,\n): element is NonDeleted<T> => !element.isDeleted;\n","export const isDarwin = /Mac|iPod|iPhone|iPad/.test(\n  typeof window !== \"undefined\" ? window.navigator.platform : \"\",\n);\n\nexport const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\",\n  CTRL_OR_CMD: isDarwin ? \"metaKey\" : \"ctrlKey\",\n  TAB: \"Tab\",\n  SPACE: \" \",\n  QUESTION_MARK: \"?\",\n  F_KEY_CODE: 70,\n  ALT_KEY_CODE: 18,\n  Z_KEY_CODE: 90,\n  GRID_KEY_CODE: 222,\n  G_KEY_CODE: 71,\n} as const;\n\nexport type Key = keyof typeof KEYS;\n\nexport const isArrowKey = (keyCode: string) =>\n  keyCode === KEYS.ARROW_LEFT ||\n  keyCode === KEYS.ARROW_RIGHT ||\n  keyCode === KEYS.ARROW_DOWN ||\n  keyCode === KEYS.ARROW_UP;\n\nexport const getResizeCenterPointKey = (event: MouseEvent | KeyboardEvent) =>\n  event.altKey || event.which === KEYS.ALT_KEY_CODE;\n\nexport const getResizeWithSidesSameLengthKey = (event: MouseEvent) =>\n  event.shiftKey;\n\nexport const getRotateWithDiscreteAngleKey = (event: MouseEvent) =>\n  event.shiftKey;\n","import { ExcalidrawElement } from \"./types\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\nimport { globalSceneState } from \"../scene\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomInteger } from \"../random\";\nimport { Point } from \"../types\";\n\ntype ElementUpdate<TElement extends ExcalidrawElement> = Omit<\n  Partial<TElement>,\n  \"id\" | \"seed\" | \"version\" | \"versionNonce\"\n>;\n\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport const mutateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n) => {\n  let didChange = false;\n\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const { points } = updates as any;\n\n  if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points), ...updates };\n  }\n\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update in case its deep prop was mutated\n        (typeof value !== \"object\" || value === null || key === \"groupIds\")\n      ) {\n        continue;\n      }\n\n      if (key === \"points\") {\n        const prevPoints = (element as any)[key];\n        const nextPoints = value;\n        if (prevPoints.length === nextPoints.length) {\n          let didChangePoints = false;\n          let i = prevPoints.length;\n          while (--i) {\n            const prevPoint: Point = prevPoints[i];\n            const nextPoint: Point = nextPoints[i];\n            if (\n              prevPoint[0] !== nextPoint[0] ||\n              prevPoint[1] !== nextPoint[1]\n            ) {\n              didChangePoints = true;\n              break;\n            }\n          }\n          if (!didChangePoints) {\n            continue;\n          }\n        }\n      }\n\n      (element as any)[key] = value;\n      didChange = true;\n    }\n  }\n\n  if (!didChange) {\n    return;\n  }\n\n  if (\n    typeof updates.height !== \"undefined\" ||\n    typeof updates.width !== \"undefined\" ||\n    typeof points !== \"undefined\"\n  ) {\n    invalidateShapeForElement(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n\n  globalSceneState.informMutation();\n};\n\nexport const newElementWith = <TElement extends ExcalidrawElement>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n): TElement => ({\n  ...element,\n  ...updates,\n  version: element.version + 1,\n  versionNonce: randomInteger(),\n});\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n} from \"./types\";\n\nexport const isTextElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElement => {\n  return element != null && element.type === \"text\";\n};\n\nexport const isLinearElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return (\n    element != null &&\n    (element.type === \"arrow\" ||\n      element.type === \"line\" ||\n      element.type === \"draw\")\n  );\n};\n\nexport const isExcalidrawElement = (element: any): boolean => {\n  return (\n    element?.type === \"text\" ||\n    element?.type === \"diamond\" ||\n    element?.type === \"rectangle\" ||\n    element?.type === \"ellipse\" ||\n    element?.type === \"arrow\" ||\n    element?.type === \"draw\" ||\n    element?.type === \"line\"\n  );\n};\n","import LanguageDetector from \"i18next-browser-languagedetector\";\n\nexport const languages = [\n  { lng: \"en\", label: \"English\", data: require(\"./locales/en.json\") },\n  { lng: \"bg-BG\", label: \"Български\", data: require(\"./locales/bg-BG.json\") },\n  { lng: \"nb-No\", label: \"Bokmål\", data: require(\"./locales/nb-NO.json\") },\n  { lng: \"de-DE\", label: \"Deutsch\", data: require(\"./locales/de-DE.json\") },\n  { lng: \"es-ES\", label: \"Español\", data: require(\"./locales/es-ES.json\") },\n  { lng: \"ca-ES\", label: \"Catalan\", data: require(\"./locales/ca-ES.json\") },\n  { lng: \"el-GR\", label: \"Ελληνικά\", data: require(\"./locales/el-GR.json\") },\n  { lng: \"fr-FR\", label: \"Français\", data: require(\"./locales/fr-FR.json\") },\n  {\n    lng: \"id-ID\",\n    label: \"Bahasa Indonesia\",\n    data: require(\"./locales/id-ID.json\"),\n  },\n  { lng: \"it-IT\", label: \"Italiano\", data: require(\"./locales/it-IT.json\") },\n  { lng: \"hu-HU\", label: \"Magyar\", data: require(\"./locales/hu-HU.json\") },\n  { lng: \"nl-NL\", label: \"Nederlands\", data: require(\"./locales/nl-NL.json\") },\n  { lng: \"pl-PL\", label: \"Polski\", data: require(\"./locales/pl-PL.json\") },\n  { lng: \"pt-PT\", label: \"Português\", data: require(\"./locales/pt-PT.json\") },\n  { lng: \"ru-RU\", label: \"Русский\", data: require(\"./locales/ru-RU.json\") },\n  { lng: \"uk-UA\", label: \"Українська\", data: require(\"./locales/uk-UA.json\") },\n  { lng: \"fi-FI\", label: \"Suomi\", data: require(\"./locales/fi-FI.json\") },\n  { lng: \"tr-TR\", label: \"Türkçe\", data: require(\"./locales/tr-TR.json\") },\n  { lng: \"ja-JP\", label: \"日本語\", data: require(\"./locales/ja-JP.json\") },\n  { lng: \"ko-KR\", label: \"한국어\", data: require(\"./locales/ko-KR.json\") },\n  { lng: \"zh-TW\", label: \"繁體中文\", data: require(\"./locales/zh-TW.json\") },\n  { lng: \"zh-CN\", label: \"简体中文\", data: require(\"./locales/zh-CN.json\") },\n  {\n    lng: \"ar-SA\",\n    label: \"العربية\",\n    data: require(\"./locales/ar-SA.json\"),\n    rtl: true,\n  },\n  {\n    lng: \"he-IL\",\n    label: \"עברית\",\n    data: require(\"./locales/he-IL.json\"),\n    rtl: true,\n  },\n];\n\nlet currentLanguage = languages[0];\nconst fallbackLanguage = languages[0];\n\nexport const setLanguage = (newLng: string | undefined) => {\n  currentLanguage =\n    languages.find((language) => language.lng === newLng) || fallbackLanguage;\n\n  try {\n    document.documentElement.dir = currentLanguage.rtl ? \"rtl\" : \"ltr\";\n  } catch (e) {}\n\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n};\n\nexport const getLanguage = () => currentLanguage;\n\nconst findPartsForData = (data: any, parts: string[]) => {\n  for (var i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\n\nexport const t = (path: string, replacement?: { [key: string]: string }) => {\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLanguage.data, parts) ||\n    findPartsForData(fallbackLanguage.data, parts);\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n  return translation;\n};\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: (lng: string) => lng,\n    isWhitelisted: () => true,\n  },\n  checkWhitelist: false,\n});\n\nsetLanguage(languageDetector.detect());\n","export const getZoomOrigin = (\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  if (canvas === null) {\n    return { x: 0, y: 0 };\n  }\n  const context = canvas.getContext(\"2d\");\n  if (context === null) {\n    return { x: 0, y: 0 };\n  }\n\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n\n  return {\n    x: normalizedCanvasWidth / 2,\n    y: normalizedCanvasHeight / 2,\n  };\n};\n\nexport const getNormalizedZoom = (zoom: number): number => {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom;\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"../element/types\";\nimport {\n  getNonDeletedElements,\n  isNonDeletedElement,\n  getElementMap,\n} from \"../element\";\n\nexport interface SceneStateCallback {\n  (): void;\n}\n\nexport interface SceneStateCallbackRemover {\n  (): void;\n}\n\nclass GlobalScene {\n  private callbacks: Set<SceneStateCallback> = new Set();\n\n  private nonDeletedElements: readonly NonDeletedExcalidrawElement[] = [];\n  private elements: readonly ExcalidrawElement[] = [];\n  private elementsMap: {\n    [id: string]: ExcalidrawElement;\n  } = {};\n\n  getElementsIncludingDeleted() {\n    return this.elements;\n  }\n\n  getElements(): readonly NonDeletedExcalidrawElement[] {\n    return this.nonDeletedElements;\n  }\n\n  getElement(id: ExcalidrawElement[\"id\"]): ExcalidrawElement | null {\n    return this.elementsMap[id] || null;\n  }\n\n  getNonDeletedElement(\n    id: ExcalidrawElement[\"id\"],\n  ): NonDeleted<ExcalidrawElement> | null {\n    const element = this.getElement(id);\n    if (element && isNonDeletedElement(element)) {\n      return element;\n    }\n    return null;\n  }\n\n  replaceAllElements(nextElements: readonly ExcalidrawElement[]) {\n    this.elements = nextElements;\n    this.elementsMap = getElementMap(nextElements);\n    this.nonDeletedElements = getNonDeletedElements(this.elements);\n    this.informMutation();\n  }\n\n  informMutation() {\n    for (const callback of Array.from(this.callbacks)) {\n      callback();\n    }\n  }\n\n  addCallback(cb: SceneStateCallback): SceneStateCallbackRemover {\n    if (this.callbacks.has(cb)) {\n      throw new Error();\n    }\n\n    this.callbacks.add(cb);\n\n    return () => {\n      if (!this.callbacks.has(cb)) {\n        throw new Error();\n      }\n      this.callbacks.delete(cb);\n    };\n  }\n}\n\nexport const globalSceneState = new GlobalScene();\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { isTextElement, isLinearElement } from \"../element/typeChecks\";\nimport {\n  getDiamondPoints,\n  getArrowPoints,\n  getElementAbsoluteCoords,\n} from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { Drawable, Options } from \"roughjs/bin/core\";\nimport { RoughSVG } from \"roughjs/bin/svg\";\nimport { RoughGenerator } from \"roughjs/bin/generator\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  SVG_NS,\n  distance,\n  getFontString,\n  getFontFamilyString,\n  isRTL,\n} from \"../utils\";\nimport { isPathALoop } from \"../math\";\nimport rough from \"roughjs/bin/rough\";\n\nconst CANVAS_PADDING = 20;\n\nconst DASHARRAY_DASHED = [12, 8];\nconst DASHARRAY_DOTTED = [3, 6];\n\nexport interface ExcalidrawElementWithCanvas {\n  element: ExcalidrawElement | ExcalidrawTextElement;\n  canvas: HTMLCanvasElement;\n  canvasZoom: number;\n  canvasOffsetX: number;\n  canvasOffsetY: number;\n}\n\nconst generateElementCanvas = (\n  element: NonDeletedExcalidrawElement,\n  zoom: number,\n): ExcalidrawElementWithCanvas => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\")!;\n\n  let canvasOffsetX = 0;\n  let canvasOffsetY = 0;\n\n  if (isLinearElement(element)) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    canvas.width =\n      distance(x1, x2) * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n    canvas.height =\n      distance(y1, y2) * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n\n    canvasOffsetX =\n      element.x > x1\n        ? Math.floor(distance(element.x, x1)) * window.devicePixelRatio\n        : 0;\n    canvasOffsetY =\n      element.y > y1\n        ? Math.floor(distance(element.y, y1)) * window.devicePixelRatio\n        : 0;\n    context.translate(canvasOffsetX * zoom, canvasOffsetY * zoom);\n  } else {\n    canvas.width =\n      element.width * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n    canvas.height =\n      element.height * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n  }\n\n  context.translate(CANVAS_PADDING, CANVAS_PADDING);\n  context.scale(window.devicePixelRatio * zoom, window.devicePixelRatio * zoom);\n\n  const rc = rough.canvas(canvas);\n  drawElementOnCanvas(element, rc, context);\n  context.translate(-CANVAS_PADDING, -CANVAS_PADDING);\n  context.scale(\n    1 / (window.devicePixelRatio * zoom),\n    1 / (window.devicePixelRatio * zoom),\n  );\n  return { element, canvas, canvasZoom: zoom, canvasOffsetX, canvasOffsetY };\n};\n\nconst drawElementOnCanvas = (\n  element: NonDeletedExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n) => {\n  context.globalAlpha = element.opacity / 100;\n  switch (element.type) {\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      rc.draw(getShapeForElement(element) as Drawable);\n      break;\n    }\n    case \"arrow\":\n    case \"draw\":\n    case \"line\": {\n      (getShapeForElement(element) as Drawable[]).forEach((shape) => {\n        rc.draw(shape);\n      });\n      break;\n    }\n    default: {\n      if (isTextElement(element)) {\n        const rtl = isRTL(element.text);\n        const shouldTemporarilyAttach = rtl && !context.canvas.isConnected;\n        if (shouldTemporarilyAttach) {\n          // to correctly render RTL text mixed with LTR, we have to append it\n          //  to the DOM\n          document.body.appendChild(context.canvas);\n        }\n        context.canvas.setAttribute(\"dir\", rtl ? \"rtl\" : \"ltr\");\n        const font = context.font;\n        context.font = getFontString(element);\n        const fillStyle = context.fillStyle;\n        context.fillStyle = element.strokeColor;\n        const textAlign = context.textAlign;\n        context.textAlign = element.textAlign as CanvasTextAlign;\n\n        // Canvas does not support multiline text by default\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n        const lineHeight = element.height / lines.length;\n        const verticalOffset = element.height - element.baseline;\n        const horizontalOffset =\n          element.textAlign === \"center\"\n            ? element.width / 2\n            : element.textAlign === \"right\"\n            ? element.width\n            : 0;\n        for (let i = 0; i < lines.length; i++) {\n          context.fillText(\n            lines[i],\n            horizontalOffset,\n            (i + 1) * lineHeight - verticalOffset,\n          );\n        }\n        context.fillStyle = fillStyle;\n        context.font = font;\n        context.textAlign = textAlign;\n        if (shouldTemporarilyAttach) {\n          context.canvas.remove();\n        }\n      } else {\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n  context.globalAlpha = 1;\n};\n\nconst elementWithCanvasCache = new WeakMap<\n  ExcalidrawElement,\n  ExcalidrawElementWithCanvas\n>();\n\nconst shapeCache = new WeakMap<\n  ExcalidrawElement,\n  Drawable | Drawable[] | null\n>();\n\nexport const getShapeForElement = (element: ExcalidrawElement) =>\n  shapeCache.get(element);\n\nexport const invalidateShapeForElement = (element: ExcalidrawElement) =>\n  shapeCache.delete(element);\n\nexport const generateRoughOptions = (element: ExcalidrawElement): Options => {\n  const options: Options = {\n    seed: element.seed,\n    strokeLineDash:\n      element.strokeStyle === \"dashed\"\n        ? DASHARRAY_DASHED\n        : element.strokeStyle === \"dotted\"\n        ? DASHARRAY_DOTTED\n        : undefined,\n    // for non-solid strokes, disable multiStroke because it tends to make\n    //  dashes/dots overlay each other\n    disableMultiStroke: element.strokeStyle !== \"solid\",\n    // for non-solid strokes, increase the width a bit to make it visually\n    //  similar to solid strokes, because we're also disabling multiStroke\n    strokeWidth:\n      element.strokeStyle !== \"solid\"\n        ? element.strokeWidth + 0.5\n        : element.strokeWidth,\n    // when increasing strokeWidth, we must explicitly set fillWeight and\n    //  hachureGap because if not specified, roughjs uses strokeWidth to\n    //  calculate them (and we don't want the fills to be modified)\n    fillWeight: element.strokeWidth / 2,\n    hachureGap: element.strokeWidth * 4,\n    roughness: element.roughness,\n    stroke: element.strokeColor,\n  };\n\n  switch (element.type) {\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      options.fillStyle = element.fillStyle;\n      options.fill =\n        element.backgroundColor === \"transparent\"\n          ? undefined\n          : element.backgroundColor;\n      if (element.type === \"ellipse\") {\n        options.curveFitting = 1;\n      }\n      return options;\n    }\n    case \"line\":\n    case \"draw\": {\n      // If shape is a line and is a closed shape,\n      // fill the shape if a color is set.\n      if (isPathALoop(element.points)) {\n        options.fillStyle = element.fillStyle;\n        options.fill =\n          element.backgroundColor === \"transparent\"\n            ? undefined\n            : element.backgroundColor;\n      }\n      return options;\n    }\n    case \"arrow\":\n      return options;\n    default: {\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nconst generateElementShape = (\n  element: NonDeletedExcalidrawElement,\n  generator: RoughGenerator,\n) => {\n  let shape = shapeCache.get(element) || null;\n  if (!shape) {\n    elementWithCanvasCache.delete(element);\n\n    switch (element.type) {\n      case \"rectangle\":\n        shape = generator.rectangle(\n          0,\n          0,\n          element.width,\n          element.height,\n          generateRoughOptions(element),\n        );\n\n        break;\n      case \"diamond\": {\n        const [\n          topX,\n          topY,\n          rightX,\n          rightY,\n          bottomX,\n          bottomY,\n          leftX,\n          leftY,\n        ] = getDiamondPoints(element);\n        shape = generator.polygon(\n          [\n            [topX, topY],\n            [rightX, rightY],\n            [bottomX, bottomY],\n            [leftX, leftY],\n          ],\n          generateRoughOptions(element),\n        );\n        break;\n      }\n      case \"ellipse\":\n        shape = generator.ellipse(\n          element.width / 2,\n          element.height / 2,\n          element.width,\n          element.height,\n          generateRoughOptions(element),\n        );\n        break;\n      case \"line\":\n      case \"draw\":\n      case \"arrow\": {\n        const options = generateRoughOptions(element);\n\n        // points array can be empty in the beginning, so it is important to add\n        // initial position to it\n        const points = element.points.length ? element.points : [[0, 0]];\n\n        // curve is always the first element\n        // this simplifies finding the curve for an element\n        shape = [generator.curve(points as [number, number][], options)];\n\n        // add lines only in arrow\n        if (element.type === \"arrow\") {\n          const [x2, y2, x3, y3, x4, y4] = getArrowPoints(element, shape);\n          // for dotted arrows caps, reduce gap to make it more legible\n          if (element.strokeStyle === \"dotted\") {\n            options.strokeLineDash = [3, 4];\n            // for solid/dashed, keep solid arrow cap\n          } else {\n            delete options.strokeLineDash;\n          }\n          shape.push(\n            ...[\n              generator.line(x3, y3, x2, y2, options),\n              generator.line(x4, y4, x2, y2, options),\n            ],\n          );\n        }\n        break;\n      }\n      case \"text\": {\n        // just to ensure we don't regenerate element.canvas on rerenders\n        shape = [];\n        break;\n      }\n    }\n    shapeCache.set(element, shape);\n  }\n};\n\nconst generateElementWithCanvas = (\n  element: NonDeletedExcalidrawElement,\n  sceneState?: SceneState,\n) => {\n  const zoom = sceneState ? sceneState.zoom : 1;\n  const prevElementWithCanvas = elementWithCanvasCache.get(element);\n  const shouldRegenerateBecauseZoom =\n    prevElementWithCanvas &&\n    prevElementWithCanvas.canvasZoom !== zoom &&\n    !sceneState?.shouldCacheIgnoreZoom;\n  if (!prevElementWithCanvas || shouldRegenerateBecauseZoom) {\n    const elementWithCanvas = generateElementCanvas(element, zoom);\n    elementWithCanvasCache.set(element, elementWithCanvas);\n    return elementWithCanvas;\n  }\n  return prevElementWithCanvas;\n};\n\nconst drawElementFromCanvas = (\n  elementWithCanvas: ExcalidrawElementWithCanvas,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  sceneState: SceneState,\n) => {\n  const element = elementWithCanvas.element;\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = ((x1 + x2) / 2 + sceneState.scrollX) * window.devicePixelRatio;\n  const cy = ((y1 + y2) / 2 + sceneState.scrollY) * window.devicePixelRatio;\n  context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n  context.translate(cx, cy);\n  context.rotate(element.angle);\n  context.drawImage(\n    elementWithCanvas.canvas!,\n    (-(x2 - x1) / 2) * window.devicePixelRatio -\n      CANVAS_PADDING / elementWithCanvas.canvasZoom,\n    (-(y2 - y1) / 2) * window.devicePixelRatio -\n      CANVAS_PADDING / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas!.width / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas!.height / elementWithCanvas.canvasZoom,\n  );\n  context.rotate(-element.angle);\n  context.translate(-cx, -cy);\n  context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n  // Clear the nested element we appended to the DOM\n};\n\nexport const renderElement = (\n  element: NonDeletedExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  renderOptimizations: boolean,\n  sceneState: SceneState,\n) => {\n  const generator = rc.generator;\n  switch (element.type) {\n    case \"selection\": {\n      context.translate(\n        element.x + sceneState.scrollX,\n        element.y + sceneState.scrollY,\n      );\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(0, 0, element.width, element.height);\n      context.fillStyle = fillStyle;\n      context.translate(\n        -element.x - sceneState.scrollX,\n        -element.y - sceneState.scrollY,\n      );\n      break;\n    }\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\":\n    case \"line\":\n    case \"draw\":\n    case \"arrow\":\n    case \"text\": {\n      generateElementShape(element, generator);\n      if (renderOptimizations) {\n        const elementWithCanvas = generateElementWithCanvas(\n          element,\n          sceneState,\n        );\n        drawElementFromCanvas(elementWithCanvas, rc, context, sceneState);\n      } else {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n        const cx = (x1 + x2) / 2 + sceneState.scrollX;\n        const cy = (y1 + y2) / 2 + sceneState.scrollY;\n        const shiftX = (x2 - x1) / 2 - (element.x - x1);\n        const shiftY = (y2 - y1) / 2 - (element.y - y1);\n        context.translate(cx, cy);\n        context.rotate(element.angle);\n        context.translate(-shiftX, -shiftY);\n        drawElementOnCanvas(element, rc, context);\n        context.translate(shiftX, shiftY);\n        context.rotate(-element.angle);\n        context.translate(-cx, -cy);\n      }\n      break;\n    }\n    default: {\n      // @ts-ignore\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nexport const renderElementToSvg = (\n  element: NonDeletedExcalidrawElement,\n  rsvg: RoughSVG,\n  svgRoot: SVGElement,\n  offsetX?: number,\n  offsetY?: number,\n) => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = (x2 - x1) / 2 - (element.x - x1);\n  const cy = (y2 - y1) / 2 - (element.y - y1);\n  const degree = (180 * element.angle) / Math.PI;\n  const generator = rsvg.generator;\n  switch (element.type) {\n    case \"selection\": {\n      // Since this is used only during editing experience, which is canvas based,\n      // this should not happen\n      throw new Error(\"Selection rendering is not supported for SVG\");\n    }\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      generateElementShape(element, generator);\n      const node = rsvg.draw(getShapeForElement(element) as Drawable);\n      const opacity = element.opacity / 100;\n      if (opacity !== 1) {\n        node.setAttribute(\"stroke-opacity\", `${opacity}`);\n        node.setAttribute(\"fill-opacity\", `${opacity}`);\n      }\n      node.setAttribute(\n        \"transform\",\n        `translate(${offsetX || 0} ${\n          offsetY || 0\n        }) rotate(${degree} ${cx} ${cy})`,\n      );\n      svgRoot.appendChild(node);\n      break;\n    }\n    case \"line\":\n    case \"draw\":\n    case \"arrow\": {\n      generateElementShape(element, generator);\n      const group = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\n      const opacity = element.opacity / 100;\n      (getShapeForElement(element) as Drawable[]).forEach((shape) => {\n        const node = rsvg.draw(shape);\n        if (opacity !== 1) {\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\n        }\n        node.setAttribute(\n          \"transform\",\n          `translate(${offsetX || 0} ${\n            offsetY || 0\n          }) rotate(${degree} ${cx} ${cy})`,\n        );\n        if (\n          (element.type === \"line\" || element.type === \"draw\") &&\n          isPathALoop(element.points) &&\n          element.backgroundColor !== \"transparent\"\n        ) {\n          node.setAttribute(\"fill-rule\", \"evenodd\");\n        }\n        group.appendChild(node);\n      });\n      svgRoot.appendChild(group);\n      break;\n    }\n    default: {\n      if (isTextElement(element)) {\n        const opacity = element.opacity / 100;\n        const node = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\n        if (opacity !== 1) {\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\n        }\n        node.setAttribute(\n          \"transform\",\n          `translate(${offsetX || 0} ${\n            offsetY || 0\n          }) rotate(${degree} ${cx} ${cy})`,\n        );\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n        const lineHeight = element.height / lines.length;\n        const verticalOffset = element.height - element.baseline;\n        const horizontalOffset =\n          element.textAlign === \"center\"\n            ? element.width / 2\n            : element.textAlign === \"right\"\n            ? element.width\n            : 0;\n        const direction = isRTL(element.text) ? \"rtl\" : \"ltr\";\n        const textAnchor =\n          element.textAlign === \"center\"\n            ? \"middle\"\n            : element.textAlign === \"right\" || direction === \"rtl\"\n            ? \"end\"\n            : \"start\";\n        for (let i = 0; i < lines.length; i++) {\n          const text = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"text\");\n          text.textContent = lines[i];\n          text.setAttribute(\"x\", `${horizontalOffset}`);\n          text.setAttribute(\"y\", `${(i + 1) * lineHeight - verticalOffset}`);\n          text.setAttribute(\"font-family\", getFontFamilyString(element));\n          text.setAttribute(\"font-size\", `${element.fontSize}px`);\n          text.setAttribute(\"fill\", element.strokeColor);\n          text.setAttribute(\"text-anchor\", textAnchor);\n          text.setAttribute(\"style\", \"white-space: pre;\");\n          text.setAttribute(\"direction\", direction);\n          node.appendChild(text);\n        }\n        svgRoot.appendChild(node);\n      } else {\n        // @ts-ignore\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n};\n","export const DRAGGING_THRESHOLD = 10; // 10px\nexport const LINE_CONFIRM_THRESHOLD = 10; // 10px\nexport const ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nexport const ELEMENT_TRANSLATE_AMOUNT = 1;\nexport const TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\nexport const SHIFT_LOCKING_ANGLE = Math.PI / 12;\nexport const CURSOR_TYPE = {\n  TEXT: \"text\",\n  CROSSHAIR: \"crosshair\",\n  GRABBING: \"grabbing\",\n  POINTER: \"pointer\",\n};\nexport const POINTER_BUTTON = {\n  MAIN: 0,\n  WHEEL: 1,\n  SECONDARY: 2,\n  TOUCH: -1,\n};\n\nexport enum SCENE {\n  INIT = \"SCENE_INIT\",\n  UPDATE = \"SCENE_UPDATE\",\n}\n\nexport enum EVENT {\n  COPY = \"copy\",\n  PASTE = \"paste\",\n  CUT = \"cut\",\n  KEYDOWN = \"keydown\",\n  KEYUP = \"keyup\",\n  MOUSE_MOVE = \"mousemove\",\n  RESIZE = \"resize\",\n  UNLOAD = \"unload\",\n  BLUR = \"blur\",\n  DRAG_OVER = \"dragover\",\n  DROP = \"drop\",\n  GESTURE_END = \"gestureend\",\n  BEFORE_UNLOAD = \"beforeunload\",\n  GESTURE_START = \"gesturestart\",\n  GESTURE_CHANGE = \"gesturechange\",\n  POINTER_MOVE = \"pointermove\",\n  POINTER_UP = \"pointerup\",\n  STATE_CHANGE = \"statechange\",\n  WHEEL = \"wheel\",\n  TOUCH_START = \"touchstart\",\n  TOUCH_END = \"touchend\",\n}\n\nexport const ENV = {\n  TEST: \"test\",\n  DEVELOPMENT: \"development\",\n};\n\nexport const BROADCAST = {\n  SERVER_VOLATILE: \"server-volatile-broadcast\",\n  SERVER: \"server-broadcast\",\n};\n\nexport const CLASSES = {\n  SHAPE_ACTIONS_MENU: \"App-menu__left\",\n};\n\n// 1-based in case we ever do `if(element.fontFamily)`\nexport const FONT_FAMILY = {\n  1: \"Virgil\",\n  2: \"Helvetica\",\n  3: \"Cascadia\",\n} as const;\n\nexport const CANVAS_ONLY_ACTIONS = [\"selectAll\"];\n\nexport const GRID_SIZE = 20; // TODO make it configurable?\n","import { Random } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\n\nlet random = new Random(Date.now());\nlet testIdBase = 0;\n\nexport const randomInteger = () => Math.floor(random.next() * 2 ** 31);\n\nexport const reseed = (seed: number) => {\n  random = new Random(seed);\n  testIdBase = 0;\n};\n\nexport const randomId = () =>\n  process.env.NODE_ENV === \"test\" ? `id${testIdBase++}` : nanoid();\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { getElementAbsoluteCoords, getElementBounds } from \"../element\";\nimport { AppState } from \"../types\";\n\nexport const getElementsWithinSelection = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  selection: NonDeletedExcalidrawElement,\n) => {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2,\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter((element) => {\n    const [elementX1, elementY1, elementX2, elementY2] = getElementBounds(\n      element,\n    );\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n};\n\nexport const isSomeElementSelected = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n): boolean => {\n  return elements.some((element) => appState.selectedElementIds[element.id]);\n};\n\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\nexport const getCommonAttributeOfSelectedElements = <T>(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n): T | null => {\n  const attributes = Array.from(\n    new Set(\n      getSelectedElements(elements, appState).map((element) =>\n        getAttribute(element),\n      ),\n    ),\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n};\n\nexport const getSelectedElements = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => {\n  return elements.filter((element) => appState.selectedElementIds[element.id]);\n};\n\nexport const getTargetElement = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => {\n  return appState.editingElement\n    ? [appState.editingElement]\n    : getSelectedElements(elements, appState);\n};\n","import { Point } from \"./types\";\n\nexport const getSizeFromPoints = (points: readonly Point[]) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\nexport const rescalePoints = (\n  dimension: 0 | 1,\n  nextDimensionSize: number,\n  prevPoints: readonly Point[],\n): Point[] => {\n  const prevDimValues = prevPoints.map((point) => point[dimension]);\n  const prevMaxDimension = Math.max(...prevDimValues);\n  const prevMinDimension = Math.min(...prevDimValues);\n  const prevDimensionSize = prevMaxDimension - prevMinDimension;\n\n  const dimensionScaleFactor =\n    prevDimensionSize === 0 ? 1 : nextDimensionSize / prevDimensionSize;\n\n  let nextMinDimension = Infinity;\n\n  const scaledPoints = prevPoints.map(\n    (prevPoint) =>\n      prevPoint.map((value, currentDimension) => {\n        if (currentDimension !== dimension) {\n          return value;\n        }\n        const scaledValue = value * dimensionScaleFactor;\n        nextMinDimension = Math.min(scaledValue, nextMinDimension);\n        return scaledValue;\n      }) as [number, number],\n  );\n\n  if (scaledPoints.length === 2) {\n    // we don't tranlate two-point lines\n    return scaledPoints;\n  }\n\n  const translation = prevMinDimension - nextMinDimension;\n\n  const nextPoints = scaledPoints.map(\n    (scaledPoint) =>\n      scaledPoint.map((value, currentDimension) => {\n        return currentDimension === dimension ? value + translation : value;\n      }) as [number, number],\n  );\n\n  return nextPoints;\n};\n","import { AppState, FlooredNumber } from \"../types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds, getClosestElementBounds } from \"../element\";\n\nimport {\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n} from \"../utils\";\n\nexport const normalizeScroll = (pos: number) =>\n  Math.floor(pos) as FlooredNumber;\n\nfunction isOutsideViewPort(\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n  cords: Array<number>,\n) {\n  const [x1, y1, x2, y2] = cords;\n  const { x: viewportX1, y: viewportY1 } = sceneCoordsToViewportCoords(\n    { sceneX: x1, sceneY: y1 },\n    appState,\n    canvas,\n    window.devicePixelRatio,\n  );\n  const { x: viewportX2, y: viewportY2 } = sceneCoordsToViewportCoords(\n    { sceneX: x2, sceneY: y2 },\n    appState,\n    canvas,\n    window.devicePixelRatio,\n  );\n  return (\n    viewportX2 - viewportX1 > window.innerWidth ||\n    viewportY2 - viewportY1 > window.innerHeight\n  );\n}\n\nexport const calculateScrollCenter = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n): { scrollX: FlooredNumber; scrollY: FlooredNumber } => {\n  if (!elements.length) {\n    return {\n      scrollX: normalizeScroll(0),\n      scrollY: normalizeScroll(0),\n    };\n  }\n  const scale = window.devicePixelRatio;\n  let [x1, y1, x2, y2] = getCommonBounds(elements);\n  if (isOutsideViewPort(appState, canvas, [x1, y1, x2, y2])) {\n    [x1, y1, x2, y2] = getClosestElementBounds(\n      elements,\n      viewportCoordsToSceneCoords(\n        { clientX: appState.scrollX, clientY: appState.scrollY },\n        appState,\n        canvas,\n        scale,\n      ),\n    );\n  }\n\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n\n  return {\n    scrollX: normalizeScroll(window.innerWidth / 2 - centerX),\n    scrollY: normalizeScroll(window.innerHeight / 2 - centerY),\n  };\n};\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { FlooredNumber } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n): ScrollBars => {\n  // This is the bounding box of all the elements\n  const [\n    elementsMinX,\n    elementsMinY,\n    elementsMaxX,\n    elementsMaxY,\n  ] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\")),\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n) => {\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar,\n  };\n};\n","import { GroupId, ExcalidrawElement, NonDeleted } from \"./element/types\";\nimport { AppState } from \"./types\";\nimport { getSelectedElements } from \"./scene\";\n\nexport function selectGroup(\n  groupId: GroupId,\n  appState: AppState,\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n): AppState {\n  const elementsInGroup = elements.filter((element) =>\n    element.groupIds.includes(groupId),\n  );\n\n  if (elementsInGroup.length < 2) {\n    if (\n      appState.selectedGroupIds[groupId] ||\n      appState.editingGroupId === groupId\n    ) {\n      return {\n        ...appState,\n        selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: false },\n        editingGroupId: null,\n      };\n    }\n    return appState;\n  }\n\n  return {\n    ...appState,\n    selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: true },\n    selectedElementIds: {\n      ...appState.selectedElementIds,\n      ...Object.fromEntries(\n        elementsInGroup.map((element) => [element.id, true]),\n      ),\n    },\n  };\n}\n\n/**\n * If the element's group is selected, don't render an individual\n * selection border around it.\n */\nexport function isSelectedViaGroup(\n  appState: AppState,\n  element: ExcalidrawElement,\n) {\n  return !!element.groupIds\n    .filter((groupId) => groupId !== appState.editingGroupId)\n    .find((groupId) => appState.selectedGroupIds[groupId]);\n}\n\nexport function getSelectedGroupIds(appState: AppState): GroupId[] {\n  return Object.entries(appState.selectedGroupIds)\n    .filter(([groupId, isSelected]) => isSelected)\n    .map(([groupId, isSelected]) => groupId);\n}\n\n/**\n * When you select an element, you often want to actually select the whole group it's in, unless\n * you're currently editing that group.\n */\nexport function selectGroupsForSelectedElements(\n  appState: AppState,\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n): AppState {\n  let nextAppState = { ...appState };\n\n  const selectedElements = getSelectedElements(elements, appState);\n\n  for (const selectedElement of selectedElements) {\n    let groupIds = selectedElement.groupIds;\n    if (appState.editingGroupId) {\n      // handle the case where a group is nested within a group\n      const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);\n      if (indexOfEditingGroup > -1) {\n        groupIds = groupIds.slice(0, indexOfEditingGroup);\n      }\n    }\n    if (groupIds.length > 0) {\n      const groupId = groupIds[groupIds.length - 1];\n      nextAppState = selectGroup(groupId, nextAppState, elements);\n    }\n  }\n\n  return nextAppState;\n}\n\nexport function isElementInGroup(element: ExcalidrawElement, groupId: string) {\n  return element.groupIds.includes(groupId);\n}\n\nexport function getElementsInGroup(\n  elements: readonly ExcalidrawElement[],\n  groupId: string,\n) {\n  return elements.filter((element) => isElementInGroup(element, groupId));\n}\n\nexport function getSelectedGroupIdForElement(\n  element: ExcalidrawElement,\n  selectedGroupIds: { [groupId: string]: boolean },\n) {\n  return element.groupIds.find((groupId) => selectedGroupIds[groupId]);\n}\n\nexport function getNewGroupIdsForDuplication(\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  editingGroupId: AppState[\"editingGroupId\"],\n  mapper: (groupId: GroupId) => GroupId,\n) {\n  const copy = [...groupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const endIndex =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  for (let i = 0; i < endIndex; i++) {\n    copy[i] = mapper(copy[i]);\n  }\n\n  return copy;\n}\n\nexport function addToGroup(\n  prevGroupIds: ExcalidrawElement[\"groupIds\"],\n  newGroupId: GroupId,\n  editingGroupId: AppState[\"editingGroupId\"],\n) {\n  // insert before the editingGroupId, or push to the end.\n  const groupIds = [...prevGroupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const positionToInsert =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  groupIds.splice(positionToInsert, 0, newGroupId);\n  return groupIds;\n}\n\nexport function removeFromSelectedGroups(\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  selectedGroupIds: { [groupId: string]: boolean },\n) {\n  return groupIds.filter((groupId) => !selectedGroupIds[groupId]);\n}\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./Viewer.css\";\nimport { NonDeletedExcalidrawElement } from \"./excalidraw/src/element/types\";\nimport { getCommonBounds } from \"./excalidraw/src/element/bounds\";\n\ntype Props = {\n  elements: readonly NonDeletedExcalidrawElement[];\n};\n\nconst Viewer: React.FC<Props> = ({ elements }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const worker = new Worker(\"./viewer.worker\", { type: \"module\" });\n      const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n      const exportPadding = 10;\n      const width = maxX - minX + exportPadding * 2;\n      const height = maxY - minY + exportPadding * 2;\n      const scale = window.devicePixelRatio;\n      canvas.width = width * scale;\n      canvas.height = height * scale;\n      const offscreen = canvas.transferControlToOffscreen();\n      const scrollX = Math.floor(-minX + exportPadding);\n      const scrollY = Math.floor(-minY + exportPadding);\n      worker.postMessage(\n        {\n          type: \"init\",\n          offscreen,\n          scale,\n          width,\n          height,\n          scrollX,\n          scrollY,\n          elements,\n        },\n        [offscreen]\n      );\n      let viewAngle = 0;\n      const onWheel = (e: WheelEvent) => {\n        e.preventDefault();\n        viewAngle += e.deltaY / 1000;\n        viewAngle = Math.max(0, Math.min(Math.PI / 2, viewAngle));\n        worker.postMessage({ type: \"render\", viewAngle });\n      };\n      canvas.addEventListener(\"wheel\", onWheel, { passive: false });\n      return () => {\n        worker.terminate();\n        canvas.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [elements]);\n\n  return (\n    <div className=\"Viewer\">\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default Viewer;\n","module.exports = __webpack_public_path__ + \"static/js/0.a51f0f45.chunk.worker.js\"","import React, { useEffect, useState } from \"react\";\n\nimport \"./Toolbar.css\";\n\ntype Props = {};\n\nconst Toolbar: React.FC<Props> = () => {\n  const [showToolbar, setShowToolbar] = useState(false);\n\n  useEffect(() => {\n    const hash = window.location.hash.slice(1);\n    const searchParams = new URLSearchParams(hash);\n    if (searchParams.get(\"toolbar\") !== \"no\") {\n      setShowToolbar(true);\n    }\n  }, []);\n\n  if (!showToolbar) {\n    return null;\n  }\n\n  const loadLink = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const match = /#json=([0-9]+),?([a-zA-Z0-9_-]*)/.exec(\n      (event.target as any).link.value /* FIXME no-any */\n    );\n    if (!match) {\n      window.alert(\"Invalid link\");\n      return;\n    }\n    window.location.hash = match[0];\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"Toolbar\">\n      <form onSubmit={loadLink}>\n        <label>\n          Excalidraw shareable link:\n          <input name=\"link\" />\n        </label>\n        <button type=\"submit\">View Layers!</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import oc from \"open-color\";\nimport { AppState, FlooredNumber } from \"./types\";\nimport { getDateTime } from \"./utils\";\nimport { t } from \"./i18n\";\nimport { FontFamily } from \"./element/types\";\n\nexport const DEFAULT_FONT_SIZE = 20;\nexport const DEFAULT_FONT_FAMILY: FontFamily = 1;\nexport const DEFAULT_TEXT_ALIGN = \"left\";\n\nexport const getDefaultAppState = (): AppState => {\n  return {\n    isLoading: false,\n    errorMessage: null,\n    draggingElement: null,\n    resizingElement: null,\n    multiElement: null,\n    editingElement: null,\n    editingLinearElement: null,\n    elementType: \"selection\",\n    elementLocked: false,\n    exportBackground: true,\n    shouldAddWatermark: false,\n    currentItemStrokeColor: oc.black,\n    currentItemBackgroundColor: \"transparent\",\n    currentItemFillStyle: \"hachure\",\n    currentItemStrokeWidth: 1,\n    currentItemStrokeStyle: \"solid\",\n    currentItemRoughness: 1,\n    currentItemOpacity: 100,\n    currentItemFontSize: DEFAULT_FONT_SIZE,\n    currentItemFontFamily: DEFAULT_FONT_FAMILY,\n    currentItemTextAlign: DEFAULT_TEXT_ALIGN,\n    viewBackgroundColor: oc.white,\n    scrollX: 0 as FlooredNumber,\n    scrollY: 0 as FlooredNumber,\n    cursorX: 0,\n    cursorY: 0,\n    cursorButton: \"up\",\n    scrolledOutside: false,\n    name: `${t(\"labels.untitled\")}-${getDateTime()}`,\n    username: \"\",\n    isCollaborating: false,\n    isResizing: false,\n    isRotating: false,\n    selectionElement: null,\n    zoom: 1,\n    openMenu: null,\n    lastPointerDownWith: \"mouse\",\n    selectedElementIds: {},\n    previousSelectedElementIds: {},\n    collaborators: new Map(),\n    shouldCacheIgnoreZoom: false,\n    showShortcutsDialog: false,\n    zenModeEnabled: false,\n    gridSize: null,\n    editingGroupId: null,\n    selectedGroupIds: {},\n  };\n};\n\nexport const clearAppStateForLocalStorage = (appState: AppState) => {\n  const {\n    draggingElement,\n    resizingElement,\n    multiElement,\n    editingElement,\n    selectionElement,\n    isResizing,\n    isRotating,\n    collaborators,\n    isCollaborating,\n    isLoading,\n    errorMessage,\n    showShortcutsDialog,\n    editingLinearElement,\n    ...exportedState\n  } = appState;\n  return exportedState;\n};\n\nexport const cleanAppStateForExport = (appState: AppState) => {\n  return {\n    viewBackgroundColor: appState.viewBackgroundColor,\n    gridSize: appState.gridSize,\n  };\n};\n","import oc from \"open-color\";\n\nconst shades = (i: number) => [\n  oc.red[i],\n  oc.pink[i],\n  oc.grape[i],\n  oc.violet[i],\n  oc.indigo[i],\n  oc.blue[i],\n  oc.cyan[i],\n  oc.teal[i],\n  oc.green[i],\n  oc.lime[i],\n  oc.yellow[i],\n  oc.orange[i],\n];\n\nexport default {\n  canvasBackground: [oc.white, oc.gray[0], oc.gray[1], ...shades(0)],\n  elementBackground: [\"transparent\", oc.gray[4], oc.gray[6], ...shades(6)],\n  elementStroke: [oc.black, oc.gray[8], oc.gray[7], ...shades(9)],\n};\n","import {\n  NonDeleted,\n  ExcalidrawLinearElement,\n  ExcalidrawElement,\n} from \"./types\";\nimport { distance2d, rotate, isPathALoop } from \"../math\";\nimport { getElementAbsoluteCoords } from \".\";\nimport { getElementPointsCoords } from \"./bounds\";\nimport { Point, AppState } from \"../types\";\nimport { mutateElement } from \"./mutateElement\";\nimport { SceneHistory } from \"../history\";\nimport { globalSceneState } from \"../scene\";\n\nexport class LinearElementEditor {\n  public elementId: ExcalidrawElement[\"id\"];\n  public activePointIndex: number | null;\n  public draggingElementPointIndex: number | null;\n  public lastUncommittedPoint: Point | null;\n\n  constructor(element: NonDeleted<ExcalidrawLinearElement>) {\n    LinearElementEditor.normalizePoints(element);\n\n    this.elementId = element.id;\n    this.activePointIndex = null;\n    this.lastUncommittedPoint = null;\n    this.draggingElementPointIndex = null;\n  }\n\n  // ---------------------------------------------------------------------------\n  // static methods\n  // ---------------------------------------------------------------------------\n\n  static POINT_HANDLE_SIZE = 20;\n\n  static getElement(id: ExcalidrawElement[\"id\"]) {\n    const element = globalSceneState.getNonDeletedElement(id);\n    if (element) {\n      return element as NonDeleted<ExcalidrawLinearElement>;\n    }\n    return null;\n  }\n\n  /** @returns whether point was dragged */\n  static handlePointDragging(\n    appState: AppState,\n    setState: React.Component<any, AppState>[\"setState\"],\n    scenePointerX: number,\n    scenePointerY: number,\n    lastX: number,\n    lastY: number,\n  ): boolean {\n    if (!appState.editingLinearElement) {\n      return false;\n    }\n    const { editingLinearElement } = appState;\n    let { draggingElementPointIndex, elementId } = editingLinearElement;\n\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return false;\n    }\n\n    const clickedPointIndex =\n      draggingElementPointIndex ??\n      LinearElementEditor.getPointIndexUnderCursor(\n        element,\n        appState.zoom,\n        scenePointerX,\n        scenePointerY,\n      );\n\n    draggingElementPointIndex = draggingElementPointIndex ?? clickedPointIndex;\n    if (draggingElementPointIndex > -1) {\n      if (\n        editingLinearElement.draggingElementPointIndex !==\n          draggingElementPointIndex ||\n        editingLinearElement.activePointIndex !== clickedPointIndex\n      ) {\n        setState({\n          editingLinearElement: {\n            ...editingLinearElement,\n            draggingElementPointIndex,\n            activePointIndex: clickedPointIndex,\n          },\n        });\n      }\n\n      const [deltaX, deltaY] = rotate(\n        scenePointerX - lastX,\n        scenePointerY - lastY,\n        0,\n        0,\n        -element.angle,\n      );\n      const targetPoint = element.points[clickedPointIndex];\n      LinearElementEditor.movePoint(element, clickedPointIndex, [\n        targetPoint[0] + deltaX,\n        targetPoint[1] + deltaY,\n      ]);\n      return true;\n    }\n    return false;\n  }\n\n  static handlePointerUp(\n    editingLinearElement: LinearElementEditor,\n  ): LinearElementEditor {\n    const { elementId, draggingElementPointIndex } = editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return editingLinearElement;\n    }\n\n    if (\n      draggingElementPointIndex !== null &&\n      (draggingElementPointIndex === 0 ||\n        draggingElementPointIndex === element.points.length - 1) &&\n      isPathALoop(element.points)\n    ) {\n      LinearElementEditor.movePoint(\n        element,\n        draggingElementPointIndex,\n        draggingElementPointIndex === 0\n          ? element.points[element.points.length - 1]\n          : element.points[0],\n      );\n    }\n    if (draggingElementPointIndex !== null) {\n      return {\n        ...editingLinearElement,\n        draggingElementPointIndex: null,\n      };\n    }\n    return editingLinearElement;\n  }\n\n  static handlePointerDown(\n    event: React.PointerEvent<HTMLCanvasElement>,\n    appState: AppState,\n    setState: React.Component<any, AppState>[\"setState\"],\n    history: SceneHistory,\n    scenePointerX: number,\n    scenePointerY: number,\n  ): {\n    didAddPoint: boolean;\n    hitElement: ExcalidrawElement | null;\n  } {\n    const ret: ReturnType<typeof LinearElementEditor[\"handlePointerDown\"]> = {\n      didAddPoint: false,\n      hitElement: null,\n    };\n\n    if (!appState.editingLinearElement) {\n      return ret;\n    }\n\n    const { elementId } = appState.editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n\n    if (!element) {\n      return ret;\n    }\n\n    if (event.altKey) {\n      if (!appState.editingLinearElement.lastUncommittedPoint) {\n        mutateElement(element, {\n          points: [\n            ...element.points,\n            LinearElementEditor.createPointAt(\n              element,\n              scenePointerX,\n              scenePointerY,\n            ),\n          ],\n        });\n      }\n      history.resumeRecording();\n      setState({\n        editingLinearElement: {\n          ...appState.editingLinearElement,\n          activePointIndex: element.points.length - 1,\n          lastUncommittedPoint: null,\n        },\n      });\n      ret.didAddPoint = true;\n      return ret;\n    }\n\n    const clickedPointIndex = LinearElementEditor.getPointIndexUnderCursor(\n      element,\n      appState.zoom,\n      scenePointerX,\n      scenePointerY,\n    );\n\n    // if we clicked on a point, set the element as hitElement otherwise\n    //  it would get deselected if the point is outside the hitbox area\n    if (clickedPointIndex > -1) {\n      ret.hitElement = element;\n    }\n\n    setState({\n      editingLinearElement: {\n        ...appState.editingLinearElement,\n        activePointIndex: clickedPointIndex > -1 ? clickedPointIndex : null,\n      },\n    });\n    return ret;\n  }\n\n  static handlePointerMove(\n    event: React.PointerEvent<HTMLCanvasElement>,\n    scenePointerX: number,\n    scenePointerY: number,\n    editingLinearElement: LinearElementEditor,\n  ): LinearElementEditor {\n    const { elementId, lastUncommittedPoint } = editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return editingLinearElement;\n    }\n\n    const { points } = element;\n    const lastPoint = points[points.length - 1];\n\n    if (!event.altKey) {\n      if (lastPoint === lastUncommittedPoint) {\n        LinearElementEditor.movePoint(element, points.length - 1, \"delete\");\n      }\n      return editingLinearElement;\n    }\n\n    const newPoint = LinearElementEditor.createPointAt(\n      element,\n      scenePointerX,\n      scenePointerY,\n    );\n\n    if (lastPoint === lastUncommittedPoint) {\n      LinearElementEditor.movePoint(\n        element,\n        element.points.length - 1,\n        newPoint,\n      );\n    } else {\n      LinearElementEditor.movePoint(element, \"new\", newPoint);\n    }\n\n    return {\n      ...editingLinearElement,\n      lastUncommittedPoint: element.points[element.points.length - 1],\n    };\n  }\n\n  static getPointsGlobalCoordinates(\n    element: NonDeleted<ExcalidrawLinearElement>,\n  ) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    return element.points.map((point) => {\n      let { x, y } = element;\n      [x, y] = rotate(x + point[0], y + point[1], cx, cy, element.angle);\n      return [x, y];\n    });\n  }\n\n  static getPointIndexUnderCursor(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    zoom: AppState[\"zoom\"],\n    x: number,\n    y: number,\n  ) {\n    const pointHandles = this.getPointsGlobalCoordinates(element);\n    let idx = pointHandles.length;\n    // loop from right to left because points on the right are rendered over\n    //  points on the left, thus should take precedence when clicking, if they\n    //  overlap\n    while (--idx > -1) {\n      const point = pointHandles[idx];\n      if (\n        distance2d(x, y, point[0], point[1]) * zoom <\n        // +1px to account for outline stroke\n        this.POINT_HANDLE_SIZE / 2 + 1\n      ) {\n        return idx;\n      }\n    }\n    return -1;\n  }\n\n  static createPointAt(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    scenePointerX: number,\n    scenePointerY: number,\n  ): Point {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const [rotatedX, rotatedY] = rotate(\n      scenePointerX,\n      scenePointerY,\n      cx,\n      cy,\n      -element.angle,\n    );\n\n    return [rotatedX - element.x, rotatedY - element.y];\n  }\n\n  // element-mutating methods\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Normalizes line points so that the start point is at [0,0]. This is\n   *  expected in various parts of the codebase.\n   */\n  static normalizePoints(element: NonDeleted<ExcalidrawLinearElement>) {\n    const { points } = element;\n\n    const offsetX = points[0][0];\n    const offsetY = points[0][1];\n\n    mutateElement(element, {\n      points: points.map((point, _idx) => {\n        return [point[0] - offsetX, point[1] - offsetY] as const;\n      }),\n      x: element.x + offsetX,\n      y: element.y + offsetY,\n    });\n  }\n\n  static movePoint(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    pointIndex: number | \"new\",\n    targetPosition: Point | \"delete\",\n  ) {\n    const { points } = element;\n\n    // in case we're moving start point, instead of modifying its position\n    //  which would break the invariant of it being at [0,0], we move\n    //  all the other points in the opposite direction by delta to\n    //  offset it. We do the same with actual element.x/y position, so\n    //  this hacks are completely transparent to the user.\n    let offsetX = 0;\n    let offsetY = 0;\n\n    let nextPoints: (readonly [number, number])[];\n    if (targetPosition === \"delete\") {\n      // remove point\n      if (pointIndex === \"new\") {\n        throw new Error(\"invalid args in movePoint\");\n      }\n      nextPoints = points.slice();\n      nextPoints.splice(pointIndex, 1);\n      if (pointIndex === 0) {\n        // if deleting first point, make the next to be [0,0] and recalculate\n        //  positions of the rest with respect to it\n        offsetX = nextPoints[0][0];\n        offsetY = nextPoints[0][1];\n        nextPoints = nextPoints.map((point, idx) => {\n          if (idx === 0) {\n            return [0, 0];\n          }\n          return [point[0] - offsetX, point[1] - offsetY];\n        });\n      }\n    } else if (pointIndex === \"new\") {\n      nextPoints = [...points, targetPosition];\n    } else {\n      const deltaX = targetPosition[0] - points[pointIndex][0];\n      const deltaY = targetPosition[1] - points[pointIndex][1];\n      nextPoints = points.map((point, idx) => {\n        if (idx === pointIndex) {\n          if (idx === 0) {\n            offsetX = deltaX;\n            offsetY = deltaY;\n            return point;\n          }\n          offsetX = 0;\n          offsetY = 0;\n\n          return [point[0] + deltaX, point[1] + deltaY] as const;\n        }\n        return offsetX || offsetY\n          ? ([point[0] - offsetX, point[1] - offsetY] as const)\n          : point;\n      });\n    }\n\n    const nextCoords = getElementPointsCoords(element, nextPoints);\n    const prevCoords = getElementPointsCoords(element, points);\n    const nextCenterX = (nextCoords[0] + nextCoords[2]) / 2;\n    const nextCenterY = (nextCoords[1] + nextCoords[3]) / 2;\n    const prevCenterX = (prevCoords[0] + prevCoords[2]) / 2;\n    const prevCenterY = (prevCoords[1] + prevCoords[3]) / 2;\n    const dX = prevCenterX - nextCenterX;\n    const dY = prevCenterY - nextCenterY;\n    const rotated = rotate(offsetX, offsetY, dX, dY, element.angle);\n\n    mutateElement(element, {\n      points: nextPoints,\n      x: element.x + rotated[0],\n      y: element.y + rotated[1],\n    });\n  }\n}\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"./element/types\";\nimport { getSelectedElements } from \"./scene\";\nimport { AppState } from \"./types\";\nimport { SVG_EXPORT_TAG } from \"./scene/export\";\nimport { tryParseSpreadsheet, renderSpreadsheet } from \"./charts\";\n\nlet CLIPBOARD = \"\";\nlet PREFER_APP_CLIPBOARD = false;\n\nexport const probablySupportsClipboardReadText =\n  \"clipboard\" in navigator && \"readText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardWriteText =\n  \"clipboard\" in navigator && \"writeText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardBlob =\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window &&\n  \"toBlob\" in HTMLCanvasElement.prototype;\n\nexport const copyToAppClipboard = async (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => {\n  CLIPBOARD = JSON.stringify(getSelectedElements(elements, appState));\n  try {\n    // when copying to in-app clipboard, clear system clipboard so that if\n    //  system clip contains text on paste we know it was copied *after* user\n    //  copied elements, and thus we should prefer the text content.\n    await copyTextToSystemClipboard(null);\n    PREFER_APP_CLIPBOARD = false;\n  } catch {\n    // if clearing system clipboard didn't work, we should prefer in-app\n    //  clipboard even if there's text in system clipboard on paste, because\n    //  we can't be sure of the order of copy operations\n    PREFER_APP_CLIPBOARD = true;\n  }\n};\n\nexport const getAppClipboard = (): {\n  elements?: readonly ExcalidrawElement[];\n} => {\n  if (!CLIPBOARD) {\n    return {};\n  }\n\n  try {\n    const clipboardElements = JSON.parse(CLIPBOARD);\n\n    if (\n      Array.isArray(clipboardElements) &&\n      clipboardElements.length > 0 &&\n      clipboardElements[0].type // need to implement a better check here...\n    ) {\n      return { elements: clipboardElements };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return {};\n};\n\nexport const getClipboardContent = async (\n  appState: AppState,\n  cursorX: number,\n  cursorY: number,\n  event: ClipboardEvent | null,\n): Promise<{\n  text?: string;\n  elements?: readonly ExcalidrawElement[];\n  error?: string;\n}> => {\n  try {\n    const text = event\n      ? event.clipboardData?.getData(\"text/plain\").trim()\n      : probablySupportsClipboardReadText &&\n        (await navigator.clipboard.readText());\n\n    if (text && !PREFER_APP_CLIPBOARD && !text.includes(SVG_EXPORT_TAG)) {\n      const result = tryParseSpreadsheet(text);\n      if (result.type === \"spreadsheet\") {\n        return {\n          elements: renderSpreadsheet(\n            appState,\n            result.spreadsheet,\n            cursorX,\n            cursorY,\n          ),\n        };\n      } else if (result.type === \"malformed spreadsheet\") {\n        return { error: result.error };\n      }\n      return { text };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return getAppClipboard();\n};\n\nexport const copyCanvasToClipboardAsPng = async (canvas: HTMLCanvasElement) =>\n  new Promise((resolve, reject) => {\n    try {\n      canvas.toBlob(async (blob: any) => {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob }),\n          ]);\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nexport const copyCanvasToClipboardAsSvg = async (svgroot: SVGSVGElement) => {\n  try {\n    await navigator.clipboard.writeText(svgroot.outerHTML);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const copyTextToSystemClipboard = async (text: string | null) => {\n  let copied = false;\n  if (probablySupportsClipboardWriteText) {\n    try {\n      // NOTE: doesn't work on FF on non-HTTPS domains, or when document\n      //  not focused\n      await navigator.clipboard.writeText(text || \"\");\n      copied = true;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // Note that execCommand doesn't allow copying empty strings, so if we're\n  //  clearing clipboard using this API, we must copy at least an empty char\n  if (!copied && !copyTextViaExecCommand(text || \" \")) {\n    throw new Error(\"couldn't copy\");\n  }\n};\n\n// adapted from https://github.com/zenorocha/clipboard.js/blob/ce79f170aa655c408b6aab33c9472e8e4fa52e19/src/clipboard-action.js#L48\nconst copyTextViaExecCommand = (text: string) => {\n  const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n\n  const textarea = document.createElement(\"textarea\");\n\n  textarea.style.border = \"0\";\n  textarea.style.padding = \"0\";\n  textarea.style.margin = \"0\";\n  textarea.style.position = \"absolute\";\n  textarea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\";\n  const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n  textarea.style.top = `${yPosition}px`;\n  // Prevent zooming on iOS\n  textarea.style.fontSize = \"12pt\";\n\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n\n  document.body.appendChild(textarea);\n\n  let success = false;\n\n  try {\n    textarea.select();\n    textarea.setSelectionRange(0, textarea.value.length);\n\n    success = document.execCommand(\"copy\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  textarea.remove();\n\n  return success;\n};\n","import {\n  ExcalidrawElement,\n  FontFamily,\n  ExcalidrawSelectionElement,\n} from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { DataState } from \"./types\";\nimport { isInvisiblySmallElement, getNormalizedDimensions } from \"../element\";\nimport { calculateScrollCenter } from \"../scene\";\nimport { randomId } from \"../random\";\nimport { DEFAULT_TEXT_ALIGN, DEFAULT_FONT_FAMILY } from \"../appState\";\nimport { FONT_FAMILY } from \"../constants\";\n\nconst getFontFamilyByName = (fontFamilyName: string): FontFamily => {\n  for (const [id, fontFamilyString] of Object.entries(FONT_FAMILY)) {\n    if (fontFamilyString.includes(fontFamilyName)) {\n      return parseInt(id) as FontFamily;\n    }\n  }\n  return DEFAULT_FONT_FAMILY;\n};\n\nfunction migrateElementWithProperties<T extends ExcalidrawElement>(\n  element: T,\n  extra: Omit<T, keyof ExcalidrawElement>,\n): T {\n  const base: Pick<T, keyof ExcalidrawElement> = {\n    type: element.type,\n    // all elements must have version > 0 so getDrawingVersion() will pick up\n    //  newly added elements\n    version: element.version || 1,\n    versionNonce: element.versionNonce ?? 0,\n    isDeleted: false,\n    id: element.id || randomId(),\n    fillStyle: element.fillStyle || \"hachure\",\n    strokeWidth: element.strokeWidth || 1,\n    strokeStyle: element.strokeStyle ?? \"solid\",\n    roughness: element.roughness ?? 1,\n    opacity: element.opacity == null ? 100 : element.opacity,\n    angle: element.angle || 0,\n    x: element.x || 0,\n    y: element.y || 0,\n    strokeColor: element.strokeColor,\n    backgroundColor: element.backgroundColor,\n    width: element.width || 0,\n    height: element.height || 0,\n    seed: element.seed ?? 1,\n    groupIds: element.groupIds || [],\n  };\n\n  return {\n    ...base,\n    ...getNormalizedDimensions(base),\n    ...extra,\n  } as T;\n}\n\nconst migrateElement = (\n  element: Exclude<ExcalidrawElement, ExcalidrawSelectionElement>,\n): typeof element => {\n  switch (element.type) {\n    case \"text\":\n      let fontSize = element.fontSize;\n      let fontFamily = element.fontFamily;\n      if (\"font\" in element) {\n        const [fontPx, _fontFamily]: [\n          string,\n          string,\n        ] = (element as any).font.split(\" \");\n        fontSize = parseInt(fontPx, 10);\n        fontFamily = getFontFamilyByName(_fontFamily);\n      }\n      return migrateElementWithProperties(element, {\n        fontSize,\n        fontFamily,\n        text: element.text ?? \"\",\n        baseline: element.baseline,\n        textAlign: element.textAlign ?? DEFAULT_TEXT_ALIGN,\n      });\n    case \"draw\":\n    case \"line\":\n    case \"arrow\": {\n      return migrateElementWithProperties(element, {\n        points:\n          // migrate old arrow model to new one\n          !Array.isArray(element.points) || element.points.length < 2\n            ? [\n                [0, 0],\n                [element.width, element.height],\n              ]\n            : element.points,\n      });\n    }\n    // generic elements\n    case \"ellipse\":\n    case \"rectangle\":\n    case \"diamond\":\n      return migrateElementWithProperties(element, {});\n\n    // don't use default case so as to catch a missing an element type case\n    //  (we also don't want to throw, but instead return void so we\n    //   filter out these unsupported elements from the restored array)\n  }\n};\n\nexport const restore = (\n  savedElements: readonly ExcalidrawElement[],\n  savedState: AppState | null,\n  opts?: { scrollToContent: boolean },\n): DataState => {\n  const elements = savedElements.reduce((elements, element) => {\n    // filtering out selection, which is legacy, no longer kept in elements,\n    //  and causing issues if retained\n    if (element.type !== \"selection\" && !isInvisiblySmallElement(element)) {\n      const migratedElement = migrateElement(element);\n      if (migratedElement) {\n        elements.push(migratedElement);\n      }\n    }\n    return elements;\n  }, [] as ExcalidrawElement[]);\n\n  if (opts?.scrollToContent && savedState) {\n    savedState = {\n      ...savedState,\n      ...calculateScrollCenter(elements, savedState, null),\n    };\n  }\n\n  return {\n    elements: elements,\n    appState: savedState,\n  };\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\n\nimport { getDefaultAppState } from \"../appState\";\n\nimport { AppState } from \"../types\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { fileSave } from \"browser-nativefs\";\n\nimport { t } from \"../i18n\";\nimport {\n  copyCanvasToClipboardAsPng,\n  copyCanvasToClipboardAsSvg,\n} from \"../clipboard\";\nimport { serializeAsJSON } from \"./json\";\n\nimport { ExportType } from \"../scene/types\";\nimport { restore } from \"./restore\";\nimport { restoreFromLocalStorage } from \"./localStorage\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { saveAsJSON, loadFromJSON } from \"./json\";\nexport { saveToLocalStorage } from \"./localStorage\";\n\nconst BACKEND_GET = \"https://json.excalidraw.com/api/v1/\";\n\nconst BACKEND_V2_POST = \"https://json.excalidraw.com/api/v2/post/\";\nconst BACKEND_V2_GET = \"https://json.excalidraw.com/api/v2/\";\n\nexport const SOCKET_SERVER = \"https://excalidraw-socket.herokuapp.com\";\n\nexport type EncryptedData = {\n  data: ArrayBuffer;\n  iv: Uint8Array;\n};\n\nexport type SocketUpdateDataSource = {\n  SCENE_INIT: {\n    type: \"SCENE_INIT\";\n    payload: {\n      elements: readonly ExcalidrawElement[];\n    };\n  };\n  SCENE_UPDATE: {\n    type: \"SCENE_UPDATE\";\n    payload: {\n      elements: readonly ExcalidrawElement[];\n    };\n  };\n  MOUSE_LOCATION: {\n    type: \"MOUSE_LOCATION\";\n    payload: {\n      socketID: string;\n      pointerCoords: { x: number; y: number };\n      button: \"down\" | \"up\";\n      selectedElementIds: AppState[\"selectedElementIds\"];\n      username: string;\n    };\n  };\n};\n\nexport type SocketUpdateDataIncoming =\n  | SocketUpdateDataSource[keyof SocketUpdateDataSource]\n  | {\n      type: \"INVALID_RESPONSE\";\n    };\n\n// TODO: Defined globally, since file handles aren't yet serializable.\n// Once `FileSystemFileHandle` can be serialized, make this\n// part of `AppState`.\n(window as any).handle = null;\n\nconst byteToHex = (byte: number): string => `0${byte.toString(16)}`.slice(-2);\n\nconst generateRandomID = async () => {\n  const arr = new Uint8Array(10);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, byteToHex).join(\"\");\n};\n\nconst generateEncryptionKey = async () => {\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  return (await window.crypto.subtle.exportKey(\"jwk\", key)).k;\n};\n\nconst createIV = () => {\n  const arr = new Uint8Array(12);\n  return window.crypto.getRandomValues(arr);\n};\n\nexport const getCollaborationLinkData = (link: string) => {\n  if (link.length === 0) {\n    return;\n  }\n  const hash = new URL(link).hash;\n  return hash.match(/^#room=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/);\n};\n\nexport const generateCollaborationLink = async () => {\n  const id = await generateRandomID();\n  const key = await generateEncryptionKey();\n  return `${window.location.origin}${window.location.pathname}#room=${id},${key}`;\n};\n\nconst getImportedKey = (key: string, usage: KeyUsage) =>\n  window.crypto.subtle.importKey(\n    \"jwk\",\n    {\n      alg: \"A128GCM\",\n      ext: true,\n      k: key,\n      key_ops: [\"encrypt\", \"decrypt\"],\n      kty: \"oct\",\n    },\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    false, // extractable\n    [usage],\n  );\n\nexport const encryptAESGEM = async (\n  data: Uint8Array,\n  key: string,\n): Promise<EncryptedData> => {\n  const importedKey = await getImportedKey(key, \"encrypt\");\n  const iv = createIV();\n  return {\n    data: await window.crypto.subtle.encrypt(\n      {\n        name: \"AES-GCM\",\n        iv,\n      },\n      importedKey,\n      data,\n    ),\n    iv,\n  };\n};\n\nexport const decryptAESGEM = async (\n  data: ArrayBuffer,\n  key: string,\n  iv: Uint8Array,\n): Promise<SocketUpdateDataIncoming> => {\n  try {\n    const importedKey = await getImportedKey(key, \"decrypt\");\n    const decrypted = await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      importedKey,\n      data,\n    );\n\n    const decodedData = new TextDecoder(\"utf-8\").decode(\n      new Uint8Array(decrypted) as any,\n    );\n    return JSON.parse(decodedData);\n  } catch (error) {\n    window.alert(t(\"alerts.decryptFailed\"));\n    console.error(error);\n  }\n  return {\n    type: \"INVALID_RESPONSE\",\n  };\n};\n\nexport const exportToBackend = async (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  const json = serializeAsJSON(elements, appState);\n  const encoded = new TextEncoder().encode(json);\n\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  // The iv is set to 0. We are never going to reuse the same key so we don't\n  // need to have an iv. (I hope that's correct...)\n  const iv = new Uint8Array(12);\n  // We use symmetric encryption. AES-GCM is the recommended algorithm and\n  // includes checks that the ciphertext has not been modified by an attacker.\n  const encrypted = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    key,\n    encoded,\n  );\n  // We use jwk encoding to be able to extract just the base64 encoded key.\n  // We will hardcode the rest of the attributes when importing back the key.\n  const exportedKey = await window.crypto.subtle.exportKey(\"jwk\", key);\n\n  try {\n    const response = await fetch(BACKEND_V2_POST, {\n      method: \"POST\",\n      body: encrypted,\n    });\n    const json = await response.json();\n    if (json.id) {\n      const url = new URL(window.location.href);\n      // We need to store the key (and less importantly the id) as hash instead\n      // of queryParam in order to never send it to the server\n      url.hash = `json=${json.id},${exportedKey.k!}`;\n      const urlString = url.toString();\n\n      window.prompt(`🔒${t(\"alerts.uploadedSecurly\")}`, urlString);\n    } else {\n      window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n    }\n  } catch (error) {\n    console.error(error);\n    window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n  }\n};\n\nexport const importFromBackend = async (\n  id: string | null,\n  privateKey: string | undefined,\n) => {\n  let elements: readonly ExcalidrawElement[] = [];\n  let appState: AppState = getDefaultAppState();\n\n  try {\n    const response = await fetch(\n      privateKey ? `${BACKEND_V2_GET}${id}` : `${BACKEND_GET}${id}.json`,\n    );\n    if (!response.ok) {\n      window.alert(t(\"alerts.importBackendFailed\"));\n      return restore(elements, appState, { scrollToContent: true });\n    }\n    let data;\n    if (privateKey) {\n      const buffer = await response.arrayBuffer();\n      const key = await getImportedKey(privateKey, \"decrypt\");\n      const iv = new Uint8Array(12);\n      const decrypted = await window.crypto.subtle.decrypt(\n        {\n          name: \"AES-GCM\",\n          iv: iv,\n        },\n        key,\n        buffer,\n      );\n      // We need to convert the decrypted array buffer to a string\n      const string = new window.TextDecoder(\"utf-8\").decode(\n        new Uint8Array(decrypted) as any,\n      );\n      data = JSON.parse(string);\n    } else {\n      // Legacy format\n      data = await response.json();\n    }\n\n    elements = data.elements || elements;\n    appState = { ...appState, ...data.appState };\n  } catch (error) {\n    window.alert(t(\"alerts.importBackendFailed\"));\n    console.error(error);\n  } finally {\n    return restore(elements, appState, { scrollToContent: true });\n  }\n};\n\nexport const exportCanvas = async (\n  type: ExportType,\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name,\n    scale = 1,\n    shouldAddWatermark,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    name: string;\n    scale?: number;\n    shouldAddWatermark: boolean;\n  },\n) => {\n  if (elements.length === 0) {\n    return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = exportToSvg(elements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      shouldAddWatermark,\n    });\n    if (type === \"svg\") {\n      await fileSave(new Blob([tempSvg.outerHTML], { type: \"image/svg+xml\" }), {\n        fileName: `${name}.svg`,\n      });\n      return;\n    } else if (type === \"clipboard-svg\") {\n      copyCanvasToClipboardAsSvg(tempSvg);\n      return;\n    }\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    scale,\n    shouldAddWatermark,\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    const fileName = `${name}.png`;\n    tempCanvas.toBlob(async (blob: any) => {\n      if (blob) {\n        await fileSave(blob, {\n          fileName: fileName,\n        });\n      }\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      copyCanvasToClipboardAsPng(tempCanvas);\n    } catch {\n      window.alert(t(\"alerts.couldNotCopyToClipboard\"));\n    }\n  } else if (type === \"backend\") {\n    const appState = getDefaultAppState();\n    if (exportBackground) {\n      appState.viewBackgroundColor = viewBackgroundColor;\n    }\n    exportToBackend(elements, appState);\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) {\n    tempCanvas.remove();\n  }\n};\n\nexport const loadScene = async (id: string | null, privateKey?: string) => {\n  let data;\n  if (id != null) {\n    // the private key is used to decrypt the content from the server, take\n    // extra care not to leak it\n    data = await importFromBackend(id, privateKey);\n    window.history.replaceState({}, \"Excalidraw\", window.location.origin);\n  } else {\n    data = restoreFromLocalStorage();\n  }\n\n  return {\n    elements: data.elements,\n    appState: data.appState && { ...data.appState },\n    commitToHistory: false,\n  };\n};\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Toolbar from \"./Toolbar\";\nimport Viewer from \"./Viewer\";\nimport { useLoadElements } from \"./useLoadElements\";\n\nconst App: React.FC = () => {\n  const { loading, elements } = useLoadElements();\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div className=\"App\">\n      <Toolbar />\n      {elements && <Viewer elements={elements} />}\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nimport { importFromBackend } from \"./excalidraw/src/data\";\nimport { getNonDeletedElements } from \"./excalidraw/src/element\";\nimport { NonDeletedExcalidrawElement } from \"./excalidraw/src/element/types\";\n\nexport const useLoadElements = () => {\n  const [loading, setLoading] = useState(true);\n  const [elements, setElements] = useState<\n    readonly NonDeletedExcalidrawElement[]\n  >();\n\n  useEffect(() => {\n    (async () => {\n      const hash = window.location.hash.slice(1);\n      const searchParams = new URLSearchParams(hash);\n      const match = /([0-9]+),?([a-zA-Z0-9_-]*)/.exec(\n        searchParams.get(\"json\") || \"\"\n      );\n      if (match) {\n        const [, id, key] = match;\n        const data = await importFromBackend(id, key);\n        setElements(getNonDeletedElements(data.elements));\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  return { loading, elements };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}